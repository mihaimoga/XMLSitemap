<?xml version="1.0" standalone="yes"?>
<library-reference><header id="doxygen.algorithm_8hpp" name="boost/algorithm/algorithm.hpp">
<para>Misc Algorithms. </para><para><para>Marshall Clow </para>

</para><namespace name="boost">
<namespace name="algorithm">
















































<function id="doxygen.algorithm_8hpp_1ae5eb786e4ac80314c2a4ea020f99f0d4" name="identity_operation"><type>BOOST_CXX14_CONSTEXPR T</type><template>
          <template-type-parameter name="T"/>
        </template><parameter name=""><paramtype>std::multiplies&lt; T &gt;</paramtype></parameter></function>
<function id="doxygen.algorithm_8hpp_1a7530742452c46b228c39787e52abb3d3" name="identity_operation"><type>BOOST_CXX14_CONSTEXPR T</type><template>
          <template-type-parameter name="T"/>
        </template><parameter name=""><paramtype>std::plus&lt; T &gt;</paramtype></parameter></function>
<function id="doxygen.algorithm_8hpp_1a9763121898ea18d84a532c1040d7ab5b" name="power"><type>BOOST_CXX14_CONSTEXPR boost::enable_if&lt; boost::is_integral&lt; Integer &gt;, T &gt;::type</type><template>
          <template-type-parameter name="T"/>
          <template-type-parameter name="Integer"/>
        </template><parameter name="x"><paramtype>T</paramtype><description><para>The value to be exponentiated </para></description></parameter><parameter name="n"><paramtype>Integer</paramtype><description><para>The exponent (must be &gt;= 0) </para></description></parameter><description><para>

</para></description><returns><para>the value "x" raised to the power "n"</para>
</returns></function>
<function id="doxygen.algorithm_8hpp_1ae01b4a52fc2d6a17e1140f2c2f9b1fab" name="power"><type>BOOST_CXX14_CONSTEXPR boost::enable_if&lt; boost::is_integral&lt; Integer &gt;, T &gt;::type</type><template>
          <template-type-parameter name="T"/>
          <template-type-parameter name="Integer"/>
          <template-type-parameter name="Operation"/>
        </template><parameter name="x"><paramtype>T</paramtype><description><para>The value to be exponentiated </para></description></parameter><parameter name="n"><paramtype>Integer</paramtype><description><para>The exponent (must be &gt;= 0) </para></description></parameter><parameter name="op"><paramtype>Operation</paramtype><description><para>The operation used </para></description></parameter><description><para>

</para></description><returns><para>the value "x" raised to the power "n" using the operation "op".</para>
</returns></function>




































































































</namespace>




















</namespace>
</header>
<header id="doxygen.apply__permutation_8hpp" name="boost/algorithm/apply_permutation.hpp">
<para>Apply permutation to a sequence. </para><para><para>Alexander Zaitsev </para>

</para><namespace name="boost">
<namespace name="algorithm">












































<function id="doxygen.apply__permutation_8hpp_1a5ebe858744a1e89bdb022be1a1b9dacb" name="apply_permutation"><type>void</type><template>
          <template-type-parameter name="RandomAccessIterator1"/>
          <template-type-parameter name="RandomAccessIterator2"/>
        </template><parameter name="item_begin"><paramtype>RandomAccessIterator1</paramtype></parameter><parameter name="item_end"><paramtype>RandomAccessIterator1</paramtype></parameter><parameter name="ind_begin"><paramtype>RandomAccessIterator2</paramtype></parameter><parameter name="ind_end"><paramtype>RandomAccessIterator2</paramtype></parameter></function>
<function id="doxygen.apply__permutation_8hpp_1a25223ee5e8f934f722bd48adbc8d016a" name="apply_reverse_permutation"><type>void</type><template>
          <template-type-parameter name="RandomAccessIterator1"/>
          <template-type-parameter name="RandomAccessIterator2"/>
        </template><parameter name="item_begin"><paramtype>RandomAccessIterator1</paramtype></parameter><parameter name="item_end"><paramtype>RandomAccessIterator1</paramtype></parameter><parameter name="ind_begin"><paramtype>RandomAccessIterator2</paramtype></parameter><parameter name="ind_end"><paramtype>RandomAccessIterator2</paramtype></parameter></function>
<function id="doxygen.apply__permutation_8hpp_1adf9b714715b149eff4085bcd2ae78648" name="apply_permutation"><type>void</type><template>
          <template-type-parameter name="Range1"/>
          <template-type-parameter name="Range2"/>
        </template><parameter name="item_range"><paramtype>Range1 &amp;</paramtype></parameter><parameter name="ind_range"><paramtype>Range2 &amp;</paramtype></parameter></function>
<function id="doxygen.apply__permutation_8hpp_1a8b36041d16ed3cfc81a9ea00e77a923f" name="apply_reverse_permutation"><type>void</type><template>
          <template-type-parameter name="Range1"/>
          <template-type-parameter name="Range2"/>
        </template><parameter name="item_range"><paramtype>Range1 &amp;</paramtype></parameter><parameter name="ind_range"><paramtype>Range2 &amp;</paramtype></parameter></function>








































































































</namespace>




















</namespace>
</header>
<header id="doxygen.clamp_8hpp" name="boost/algorithm/clamp.hpp">
<para>Clamp algorithm. </para><para><para>Marshall Clow</para>

Suggested by olafvdspek in <ulink url="https://svn.boost.org/trac/boost/ticket/3215">https://svn.boost.org/trac/boost/ticket/3215</ulink> </para><namespace name="boost">
<namespace name="algorithm">






































<function id="doxygen.clamp_8hpp_1a03ee61a7f741076b4ddeec3bc2bc9ffc" name="clamp"><type>BOOST_CXX14_CONSTEXPR T const &amp;</type><template>
          <template-type-parameter name="T"/>
          <template-type-parameter name="Pred"/>
        </template><parameter name="val"><paramtype>T const &amp;</paramtype><description><para>The value to be clamped </para></description></parameter><parameter name="lo"><paramtype>typename boost::type_identity&lt; T &gt;::type const &amp;</paramtype><description><para>The lower bound of the range to be clamped to </para></description></parameter><parameter name="hi"><paramtype>typename boost::type_identity&lt; T &gt;::type const &amp;</paramtype><description><para>The upper bound of the range to be clamped to </para></description></parameter><parameter name="p"><paramtype>Pred</paramtype><description><para>A predicate to use to compare the values. p ( a, b ) returns a boolean. </para></description></parameter><description><para>

</para></description><returns><para>the value "val" brought into the range [ lo, hi ] using the comparison predicate p. If p ( val, lo ) return lo. If p ( hi, val ) return hi. Otherwise, return the original value.</para>
</returns></function>
<function id="doxygen.clamp_8hpp_1a1bb419d8d01987445ade055fb3c11f42" name="clamp"><type>BOOST_CXX14_CONSTEXPR T const &amp;</type><template>
          <template-type-parameter name="T"/>
        </template><parameter name="val"><paramtype>const T &amp;</paramtype></parameter><parameter name="lo"><paramtype>typename boost::type_identity&lt; T &gt;::type const &amp;</paramtype></parameter><parameter name="hi"><paramtype>typename boost::type_identity&lt; T &gt;::type const &amp;</paramtype></parameter></function>
<function id="doxygen.clamp_8hpp_1abc061cb012f464613d4d9ad298d79c02" name="clamp_range"><type>BOOST_CXX14_CONSTEXPR OutputIterator</type><template>
          <template-type-parameter name="InputIterator"/>
          <template-type-parameter name="OutputIterator"/>
        </template><parameter name="first"><paramtype>InputIterator</paramtype></parameter><parameter name="last"><paramtype>InputIterator</paramtype></parameter><parameter name="out"><paramtype>OutputIterator</paramtype></parameter><parameter name="lo"><paramtype>typename std::iterator_traits&lt; InputIterator &gt;::value_type const &amp;</paramtype></parameter><parameter name="hi"><paramtype>typename std::iterator_traits&lt; InputIterator &gt;::value_type const &amp;</paramtype></parameter></function>
<function id="doxygen.clamp_8hpp_1a9f4a252035efd3ef42c11844ed207279" name="clamp_range"><type>BOOST_CXX14_CONSTEXPR boost::disable_if_c&lt; boost::is_same&lt; Range, OutputIterator &gt;::value, OutputIterator &gt;::type</type><template>
          <template-type-parameter name="Range"/>
          <template-type-parameter name="OutputIterator"/>
        </template><parameter name="r"><paramtype>const Range &amp;</paramtype><description><para>The range of values to be clamped </para></description></parameter><parameter name="out"><paramtype>OutputIterator</paramtype><description><para>An output iterator to write the clamped values into </para></description></parameter><parameter name="lo"><paramtype>typename std::iterator_traits&lt; typename boost::range_iterator&lt; const Range &gt;::type &gt;::value_type const &amp;</paramtype><description><para>The lower bound of the range to be clamped to </para></description></parameter><parameter name="hi"><paramtype>typename std::iterator_traits&lt; typename boost::range_iterator&lt; const Range &gt;::type &gt;::value_type const &amp;</paramtype><description><para>The upper bound of the range to be clamped to </para></description></parameter><description><para>

</para></description><returns><para>clamp the sequence of values [first, last) into [ lo, hi ]</para>
</returns></function>
<function id="doxygen.clamp_8hpp_1a347e6759bc99eedc17feaa83eda8a276" name="clamp_range"><type>BOOST_CXX14_CONSTEXPR OutputIterator</type><template>
          <template-type-parameter name="InputIterator"/>
          <template-type-parameter name="OutputIterator"/>
          <template-type-parameter name="Pred"/>
        </template><parameter name="first"><paramtype>InputIterator</paramtype></parameter><parameter name="last"><paramtype>InputIterator</paramtype></parameter><parameter name="out"><paramtype>OutputIterator</paramtype></parameter><parameter name="lo"><paramtype>typename std::iterator_traits&lt; InputIterator &gt;::value_type const &amp;</paramtype></parameter><parameter name="hi"><paramtype>typename std::iterator_traits&lt; InputIterator &gt;::value_type const &amp;</paramtype></parameter><parameter name="p"><paramtype>Pred</paramtype></parameter></function>
<function id="doxygen.clamp_8hpp_1ab511b5952955a8cb3354f884eda9188b" name="clamp_range"><type>BOOST_CXX14_CONSTEXPR boost::disable_if_c&lt; boost::is_same&lt; Range, OutputIterator &gt;::value, OutputIterator &gt;::type</type><template>
          <template-type-parameter name="Range"/>
          <template-type-parameter name="OutputIterator"/>
          <template-type-parameter name="Pred"/>
        </template><parameter name="r"><paramtype>const Range &amp;</paramtype><description><para>The range of values to be clamped </para></description></parameter><parameter name="out"><paramtype>OutputIterator</paramtype><description><para>An output iterator to write the clamped values into </para></description></parameter><parameter name="lo"><paramtype>typename std::iterator_traits&lt; typename boost::range_iterator&lt; const Range &gt;::type &gt;::value_type const &amp;</paramtype><description><para>The lower bound of the range to be clamped to </para></description></parameter><parameter name="hi"><paramtype>typename std::iterator_traits&lt; typename boost::range_iterator&lt; const Range &gt;::type &gt;::value_type const &amp;</paramtype><description><para>The upper bound of the range to be clamped to </para></description></parameter><parameter name="p"><paramtype>Pred</paramtype><description><para>A predicate to use to compare the values. p ( a, b ) returns a boolean. </para></description></parameter><description><para>

</para></description><returns><para>clamp the sequence of values [first, last) into [ lo, hi ] using the comparison predicate p.</para>
</returns></function>












































































































</namespace>




















</namespace>
</header>
<header id="doxygen.all__of_8hpp" name="boost/algorithm/cxx11/all_of.hpp">
<para>Test ranges to see if all elements match a value or predicate. </para><para><para>Marshall Clow </para>

</para><namespace name="boost">
<namespace name="algorithm">




























































































































<function id="doxygen.all__of_8hpp_1a2c10f0912d02c5a8bbebfc71094fc124" name="all_of"><type>BOOST_CXX14_CONSTEXPR bool</type><template>
          <template-type-parameter name="InputIterator"/>
          <template-type-parameter name="Predicate"/>
        </template><parameter name="first"><paramtype>InputIterator</paramtype><description><para>The start of the input sequence </para></description></parameter><parameter name="last"><paramtype>InputIterator</paramtype><description><para>One past the end of the input sequence </para></description></parameter><parameter name="p"><paramtype>Predicate</paramtype><description><para>A predicate for testing the elements of the sequence</para></description></parameter><description><para>
<note><para>returns true on an empty range</para>
</note>

<note><para>This function is part of the C++2011 standard library. </para>
</note>
</para></description><returns><para>true if all elements in [first, last) satisfy the predicate 'p' </para>
</returns></function>
<function id="doxygen.all__of_8hpp_1a0dae61ac0e6929341aaad792e5fd1603" name="all_of"><type>BOOST_CXX14_CONSTEXPR bool</type><template>
          <template-type-parameter name="Range"/>
          <template-type-parameter name="Predicate"/>
        </template><parameter name="r"><paramtype>const Range &amp;</paramtype><description><para>The input range </para></description></parameter><parameter name="p"><paramtype>Predicate</paramtype><description><para>A predicate for testing the elements of the range </para></description></parameter><description><para>
<note><para>returns true on an empty range</para>
</note>

</para></description><returns><para>true if all elements in the range satisfy the predicate 'p' </para>
</returns></function>
<function id="doxygen.all__of_8hpp_1a81021938328454cadfa6a1a792394a85" name="all_of_equal"><type>BOOST_CXX14_CONSTEXPR bool</type><template>
          <template-type-parameter name="InputIterator"/>
          <template-type-parameter name="T"/>
        </template><parameter name="first"><paramtype>InputIterator</paramtype><description><para>The start of the input sequence </para></description></parameter><parameter name="last"><paramtype>InputIterator</paramtype><description><para>One past the end of the input sequence </para></description></parameter><parameter name="val"><paramtype>const T &amp;</paramtype><description><para>A value to compare against </para></description></parameter><description><para>
<note><para>returns true on an empty range</para>
</note>

</para></description><returns><para>true if all elements in [first, last) are equal to 'val' </para>
</returns></function>
<function id="doxygen.all__of_8hpp_1a77d594da88347c9222f49eb2d87b65ac" name="all_of_equal"><type>BOOST_CXX14_CONSTEXPR bool</type><template>
          <template-type-parameter name="Range"/>
          <template-type-parameter name="T"/>
        </template><parameter name="r"><paramtype>const Range &amp;</paramtype><description><para>The input range </para></description></parameter><parameter name="val"><paramtype>const T &amp;</paramtype><description><para>A value to compare against </para></description></parameter><description><para>
<note><para>returns true on an empty range</para>
</note>

</para></description><returns><para>true if all elements in the range are equal to 'val' </para>
</returns></function>
























</namespace>




















</namespace>
</header>
<header id="doxygen.any__of_8hpp" name="boost/algorithm/cxx11/any_of.hpp">
<para>Test ranges to see if any elements match a value or predicate. </para><para><para>Marshall Clow </para>

</para><namespace name="boost">
<namespace name="algorithm">
























































































































<function id="doxygen.any__of_8hpp_1a4a71c3320e583bbc4c5fbd19b73cbad8" name="any_of"><type>BOOST_CXX14_CONSTEXPR bool</type><template>
          <template-type-parameter name="InputIterator"/>
          <template-type-parameter name="Predicate"/>
        </template><parameter name="first"><paramtype>InputIterator</paramtype><description><para>The start of the input sequence </para></description></parameter><parameter name="last"><paramtype>InputIterator</paramtype><description><para>One past the end of the input sequence </para></description></parameter><parameter name="p"><paramtype>Predicate</paramtype><description><para>A predicate for testing the elements of the sequence </para></description></parameter><description><para>
<note><para>returns false on an empty range</para>
</note>

</para></description><returns><para>true if any of the elements in [first, last) satisfy the predicate </para>
</returns></function>
<function id="doxygen.any__of_8hpp_1a89d39a9cf486c4df45fa9be9016bff66" name="any_of"><type>BOOST_CXX14_CONSTEXPR bool</type><template>
          <template-type-parameter name="Range"/>
          <template-type-parameter name="Predicate"/>
        </template><parameter name="r"><paramtype>const Range &amp;</paramtype><description><para>The input range </para></description></parameter><parameter name="p"><paramtype>Predicate</paramtype><description><para>A predicate for testing the elements of the range </para></description></parameter><description><para>
<note><para>returns false on an empty range</para>
</note>

</para></description><returns><para>true if any elements in the range satisfy the predicate 'p' </para>
</returns></function>
<function id="doxygen.any__of_8hpp_1a09605055796d8215ec6561fb18745743" name="any_of_equal"><type>BOOST_CXX14_CONSTEXPR bool</type><template>
          <template-type-parameter name="InputIterator"/>
          <template-type-parameter name="V"/>
        </template><parameter name="first"><paramtype>InputIterator</paramtype><description><para>The start of the input sequence </para></description></parameter><parameter name="last"><paramtype>InputIterator</paramtype><description><para>One past the end of the input sequence </para></description></parameter><parameter name="val"><paramtype>const V &amp;</paramtype><description><para>A value to compare against </para></description></parameter><description><para>
<note><para>returns false on an empty range</para>
</note>

</para></description><returns><para>true if any of the elements in [first, last) are equal to 'val' </para>
</returns></function>
<function id="doxygen.any__of_8hpp_1ac5d5e992bc22bfb8427c4ed5fe25c207" name="any_of_equal"><type>BOOST_CXX14_CONSTEXPR bool</type><template>
          <template-type-parameter name="Range"/>
          <template-type-parameter name="V"/>
        </template><parameter name="r"><paramtype>const Range &amp;</paramtype><description><para>The input range </para></description></parameter><parameter name="val"><paramtype>const V &amp;</paramtype><description><para>A value to compare against </para></description></parameter><description><para>
<note><para>returns false on an empty range</para>
</note>

</para></description><returns><para>true if any of the elements in the range are equal to 'val' </para>
</returns></function>




























</namespace>




















</namespace>
</header>
<header id="doxygen.copy__if_8hpp" name="boost/algorithm/cxx11/copy_if.hpp">
<para>Copy a subset of a sequence to a new sequence. </para><para><para>Marshall Clow </para>

</para><namespace name="boost">
<namespace name="algorithm">














































































































<function id="doxygen.copy__if_8hpp_1ab570b927337e821c3678a7837d513e49" name="copy_if"><type>BOOST_CXX14_CONSTEXPR OutputIterator</type><template>
          <template-type-parameter name="InputIterator"/>
          <template-type-parameter name="OutputIterator"/>
          <template-type-parameter name="Predicate"/>
        </template><parameter name="first"><paramtype>InputIterator</paramtype><description><para>The start of the input sequence </para></description></parameter><parameter name="last"><paramtype>InputIterator</paramtype><description><para>One past the end of the input sequence </para></description></parameter><parameter name="result"><paramtype>OutputIterator</paramtype><description><para>An output iterator to write the results into </para></description></parameter><parameter name="p"><paramtype>Predicate</paramtype><description><para>A predicate for testing the elements of the range </para></description></parameter><purpose>Copies all the elements from the input range that satisfy the predicate to the output range. </purpose><description><para>

<note><para>This function is part of the C++2011 standard library. </para>
</note>
</para></description><returns><para>The updated output iterator</para>
</returns></function>
<function id="doxygen.copy__if_8hpp_1aeebfa43af61afe62403573e8e78ffdbd" name="copy_if"><type>BOOST_CXX14_CONSTEXPR OutputIterator</type><template>
          <template-type-parameter name="Range"/>
          <template-type-parameter name="OutputIterator"/>
          <template-type-parameter name="Predicate"/>
        </template><parameter name="r"><paramtype>const Range &amp;</paramtype><description><para>The input range </para></description></parameter><parameter name="result"><paramtype>OutputIterator</paramtype><description><para>An output iterator to write the results into </para></description></parameter><parameter name="p"><paramtype>Predicate</paramtype><description><para>A predicate for testing the elements of the range </para></description></parameter><purpose>Copies all the elements from the input range that satisfy the predicate to the output range. </purpose><description><para>

</para></description><returns><para>The updated output iterator</para>
</returns></function>
<function id="doxygen.copy__if_8hpp_1a7a0a091a1945a56babc0a409e582913b" name="copy_while"><type>BOOST_CXX14_CONSTEXPR std::pair&lt; InputIterator, OutputIterator &gt;</type><template>
          <template-type-parameter name="InputIterator"/>
          <template-type-parameter name="OutputIterator"/>
          <template-type-parameter name="Predicate"/>
        </template><parameter name="first"><paramtype>InputIterator</paramtype><description><para>The start of the input sequence </para></description></parameter><parameter name="last"><paramtype>InputIterator</paramtype><description><para>One past the end of the input sequence </para></description></parameter><parameter name="result"><paramtype>OutputIterator</paramtype><description><para>An output iterator to write the results into </para></description></parameter><parameter name="p"><paramtype>Predicate</paramtype><description><para>A predicate for testing the elements of the range </para></description></parameter><purpose>Copies all the elements at the start of the input range that satisfy the predicate to the output range. </purpose><description><para>

</para></description><returns><para>The updated input and output iterators</para>
</returns></function>
<function id="doxygen.copy__if_8hpp_1a76490c506a5987d26ab5d10b3bb3f3d1" name="copy_while"><type>BOOST_CXX14_CONSTEXPR std::pair&lt; typename boost::range_iterator&lt; const Range &gt;::type, OutputIterator &gt;</type><template>
          <template-type-parameter name="Range"/>
          <template-type-parameter name="OutputIterator"/>
          <template-type-parameter name="Predicate"/>
        </template><parameter name="r"><paramtype>const Range &amp;</paramtype><description><para>The input range </para></description></parameter><parameter name="result"><paramtype>OutputIterator</paramtype><description><para>An output iterator to write the results into </para></description></parameter><parameter name="p"><paramtype>Predicate</paramtype><description><para>A predicate for testing the elements of the range </para></description></parameter><purpose>Copies all the elements at the start of the input range that satisfy the predicate to the output range. </purpose><description><para>

</para></description><returns><para>The updated input and output iterators</para>
</returns></function>
<function id="doxygen.copy__if_8hpp_1aaf28aeebc489fe9053a1983dfe35217c" name="copy_until"><type>BOOST_CXX14_CONSTEXPR std::pair&lt; InputIterator, OutputIterator &gt;</type><template>
          <template-type-parameter name="InputIterator"/>
          <template-type-parameter name="OutputIterator"/>
          <template-type-parameter name="Predicate"/>
        </template><parameter name="first"><paramtype>InputIterator</paramtype><description><para>The start of the input sequence </para></description></parameter><parameter name="last"><paramtype>InputIterator</paramtype><description><para>One past the end of the input sequence </para></description></parameter><parameter name="result"><paramtype>OutputIterator</paramtype><description><para>An output iterator to write the results into </para></description></parameter><parameter name="p"><paramtype>Predicate</paramtype><description><para>A predicate for testing the elements of the range </para></description></parameter><purpose>Copies all the elements at the start of the input range that do not satisfy the predicate to the output range. </purpose><description><para>

</para></description><returns><para>The updated output iterator</para>
</returns></function>
<function id="doxygen.copy__if_8hpp_1aee3e4f9ba4ee0cdda5efcfa7fb902cbe" name="copy_until"><type>BOOST_CXX14_CONSTEXPR std::pair&lt; typename boost::range_iterator&lt; const Range &gt;::type, OutputIterator &gt;</type><template>
          <template-type-parameter name="Range"/>
          <template-type-parameter name="OutputIterator"/>
          <template-type-parameter name="Predicate"/>
        </template><parameter name="r"><paramtype>const Range &amp;</paramtype><description><para>The input range </para></description></parameter><parameter name="result"><paramtype>OutputIterator</paramtype><description><para>An output iterator to write the results into </para></description></parameter><parameter name="p"><paramtype>Predicate</paramtype><description><para>A predicate for testing the elements of the range </para></description></parameter><purpose>Copies all the elements at the start of the input range that do not satisfy the predicate to the output range. </purpose><description><para>

</para></description><returns><para>The updated output iterator</para>
</returns></function>
<function id="doxygen.copy__if_8hpp_1ac3ce8c6cb6c98a90603d68ca72dc5691" name="copy_if_while"><type>BOOST_CXX14_CONSTEXPR std::pair&lt; InputIterator, OutputIterator &gt;</type><template>
          <template-type-parameter name="InputIterator"/>
          <template-type-parameter name="OutputIterator"/>
          <template-type-parameter name="CopyPredicate"/>
          <template-type-parameter name="TerminatePred"/>
        </template><parameter name="first"><paramtype>InputIterator</paramtype><description><para>The start of the input sequence </para></description></parameter><parameter name="last"><paramtype>InputIterator</paramtype><description><para>One past the end of the input sequence </para></description></parameter><parameter name="result"><paramtype>OutputIterator</paramtype><description><para>An output iterator to write the results into </para></description></parameter><parameter name="copy_pred"><paramtype>CopyPredicate</paramtype><description><para>A predicate for testing whether to the current element </para></description></parameter><parameter name="term_pred"><paramtype>TerminatePred</paramtype><description><para>A predicate for testing whether to end the copy operation </para></description></parameter><purpose>Copies all the elements from the input range that satisfy the copy predicate to the output range while the termination predicate is satisfied. </purpose><description><para>

</para></description><returns><para>The updated output iterator</para>
</returns></function>
<function id="doxygen.copy__if_8hpp_1af13538583adf7d4e49f72e769cd113aa" name="copy_if_while"><type>BOOST_CXX14_CONSTEXPR std::pair&lt; typename boost::range_iterator&lt; const Range &gt;::type, OutputIterator &gt;</type><template>
          <template-type-parameter name="Range"/>
          <template-type-parameter name="OutputIterator"/>
          <template-type-parameter name="CopyPredicate"/>
          <template-type-parameter name="TerminatePred"/>
        </template><parameter name="r"><paramtype>const Range &amp;</paramtype><description><para>The input range </para></description></parameter><parameter name="result"><paramtype>OutputIterator</paramtype><description><para>An output iterator to write the results into </para></description></parameter><parameter name="copy_pred"><paramtype>CopyPredicate</paramtype><description><para>A predicate for testing whether to the current element </para></description></parameter><parameter name="term_pred"><paramtype>TerminatePred</paramtype><description><para>A predicate for testing whether to end the copy operation </para></description></parameter><purpose>Copies all the elements from the input range that satisfy the copy predicate to the output range while the termination predicate is satisfied. </purpose><description><para>

</para></description><returns><para>The updated output iterator</para>
</returns></function>
<function id="doxygen.copy__if_8hpp_1af35bc280150bef34a489c0afd7ee45ad" name="copy_if_until"><type>BOOST_CXX14_CONSTEXPR std::pair&lt; InputIterator, OutputIterator &gt;</type><template>
          <template-type-parameter name="InputIterator"/>
          <template-type-parameter name="OutputIterator"/>
          <template-type-parameter name="CopyPredicate"/>
          <template-type-parameter name="TerminatePred"/>
        </template><parameter name="first"><paramtype>InputIterator</paramtype><description><para>The start of the input sequence </para></description></parameter><parameter name="last"><paramtype>InputIterator</paramtype><description><para>One past the end of the input sequence </para></description></parameter><parameter name="result"><paramtype>OutputIterator</paramtype><description><para>An output iterator to write the results into </para></description></parameter><parameter name="copy_pred"><paramtype>CopyPredicate</paramtype><description><para>A predicate for testing whether to the current element </para></description></parameter><parameter name="term_pred"><paramtype>TerminatePred</paramtype><description><para>A predicate for testing whether to end the copy operation </para></description></parameter><purpose>Copies all the elements from the input range that satisfy the copy predicate to the output range until the termination predicate is satisfied. </purpose><description><para>

</para></description><returns><para>The updated output iterator</para>
</returns></function>
<function id="doxygen.copy__if_8hpp_1af910f18bdb371c96494120a5e126a906" name="copy_if_until"><type>BOOST_CXX14_CONSTEXPR std::pair&lt; typename boost::range_iterator&lt; const Range &gt;::type, OutputIterator &gt;</type><template>
          <template-type-parameter name="Range"/>
          <template-type-parameter name="OutputIterator"/>
          <template-type-parameter name="CopyPredicate"/>
          <template-type-parameter name="TerminatePred"/>
        </template><parameter name="r"><paramtype>const Range &amp;</paramtype><description><para>The input range </para></description></parameter><parameter name="result"><paramtype>OutputIterator</paramtype><description><para>An output iterator to write the results into </para></description></parameter><parameter name="copy_pred"><paramtype>CopyPredicate</paramtype><description><para>A predicate for testing whether to the current element </para></description></parameter><parameter name="term_pred"><paramtype>TerminatePred</paramtype><description><para>A predicate for testing whether to end the copy operation </para></description></parameter><purpose>Copies all the elements from the input range that satisfy the copy predicate to the output range until the termination predicate is satisfied. </purpose><description><para>

</para></description><returns><para>The updated output iterator</para>
</returns></function>
































</namespace>




















</namespace>
</header>
<header id="doxygen.copy__n_8hpp" name="boost/algorithm/cxx11/copy_n.hpp">
<para>Copy n items from one sequence to another. </para><para><para>Marshall Clow </para>

</para><namespace name="boost">
<namespace name="algorithm">













































































































<function id="doxygen.copy__n_8hpp_1a6350cb49f031cebab1d5c67fe4cde109" name="copy_n"><type>BOOST_CXX14_CONSTEXPR OutputIterator</type><template>
          <template-type-parameter name="InputIterator"/>
          <template-type-parameter name="Size"/>
          <template-type-parameter name="OutputIterator"/>
        </template><parameter name="first"><paramtype>InputIterator</paramtype><description><para>The start of the input sequence </para></description></parameter><parameter name="n"><paramtype>Size</paramtype><description><para>The number of elements to copy </para></description></parameter><parameter name="result"><paramtype>OutputIterator</paramtype><description><para>An output iterator to write the results into </para></description></parameter><purpose>Copies exactly n (n &gt; 0) elements from the range starting at first to the range starting at result. </purpose><description><para>

<note><para>This function is part of the C++2011 standard library. </para>
</note>
</para></description><returns><para>The updated output iterator</para>
</returns></function>










































</namespace>




















</namespace>
</header>
<header id="doxygen.find__if__not_8hpp" name="boost/algorithm/cxx11/find_if_not.hpp">
<para>Find the first element in a sequence that does not satisfy a predicate. </para><para><para>Marshall Clow </para>

</para><namespace name="boost">
<namespace name="algorithm">











































































































<function id="doxygen.find__if__not_8hpp_1a9a9f3d64bddf413076b90d6bc5e1dab6" name="find_if_not"><type>BOOST_CXX14_CONSTEXPR InputIterator</type><template>
          <template-type-parameter name="InputIterator"/>
          <template-type-parameter name="Predicate"/>
        </template><parameter name="first"><paramtype>InputIterator</paramtype><description><para>The start of the input sequence </para></description></parameter><parameter name="last"><paramtype>InputIterator</paramtype><description><para>One past the end of the input sequence </para></description></parameter><parameter name="p"><paramtype>Predicate</paramtype><description><para>A predicate for testing the elements of the range </para></description></parameter><purpose>Finds the first element in the sequence that does not satisfy the predicate. </purpose><description><para>

<note><para>This function is part of the C++2011 standard library. </para>
</note>
</para></description><returns><para>The iterator pointing to the desired element.</para>
</returns></function>
<function id="doxygen.find__if__not_8hpp_1a125ee8121370eaf3d77ff20d245f83ed" name="find_if_not"><type>BOOST_CXX14_CONSTEXPR boost::range_iterator&lt; constRange &gt;::type</type><template>
          <template-type-parameter name="Range"/>
          <template-type-parameter name="Predicate"/>
        </template><parameter name="r"><paramtype>const Range &amp;</paramtype><description><para>The input range </para></description></parameter><parameter name="p"><paramtype>Predicate</paramtype><description><para>A predicate for testing the elements of the range </para></description></parameter><purpose>Finds the first element in the sequence that does not satisfy the predicate. </purpose><description><para>

</para></description><returns><para>The iterator pointing to the desired element.</para>
</returns></function>











































</namespace>




















</namespace>
</header>
<header id="doxygen.iota_8hpp" name="boost/algorithm/cxx11/iota.hpp">
<para>Generate an increasing series. </para><para><para>Marshall Clow </para>

</para><namespace name="boost">
<namespace name="algorithm">








































































































<function id="doxygen.iota_8hpp_1a7ef32ce164c7674c6855f6aa6b485725" name="iota"><type>BOOST_CXX14_CONSTEXPR void</type><template>
          <template-type-parameter name="ForwardIterator"/>
          <template-type-parameter name="T"/>
        </template><parameter name="first"><paramtype>ForwardIterator</paramtype><description><para>The start of the input sequence </para></description></parameter><parameter name="last"><paramtype>ForwardIterator</paramtype><description><para>One past the end of the input sequence </para></description></parameter><parameter name="value"><paramtype>T</paramtype><description><para>The initial value of the sequence to be generated </para></description></parameter><purpose>Generates an increasing sequence of values, and stores them in [first, last) </purpose><description><para>
<note><para>This function is part of the C++2011 standard library. </para>
</note>
</para></description></function>
<function id="doxygen.iota_8hpp_1a62f3431ddde5430d51d129d879b20c31" name="iota"><type>BOOST_CXX14_CONSTEXPR void</type><template>
          <template-type-parameter name="Range"/>
          <template-type-parameter name="T"/>
        </template><parameter name="r"><paramtype>Range &amp;</paramtype><description><para>The input range </para></description></parameter><parameter name="value"><paramtype>T</paramtype><description><para>The initial value of the sequence to be generated </para></description></parameter><purpose>Generates an increasing sequence of values, and stores them in the input Range. </purpose><description><para>
</para></description></function>
<function id="doxygen.iota_8hpp_1ac9065b411cec49109fcd6406c44f70fb" name="iota_n"><type>BOOST_CXX14_CONSTEXPR OutputIterator</type><template>
          <template-type-parameter name="OutputIterator"/>
          <template-type-parameter name="T"/>
        </template><parameter name="out"><paramtype>OutputIterator</paramtype><description><para>An output iterator to write the results into </para></description></parameter><parameter name="value"><paramtype>T</paramtype><description><para>The initial value of the sequence to be generated </para></description></parameter><parameter name="n"><paramtype>std::size_t</paramtype><description><para>The number of items to write </para></description></parameter><purpose>Generates an increasing sequence of values, and stores them in the input Range. </purpose><description><para>
</para></description></function>













































</namespace>




















</namespace>
</header>
<header id="doxygen.is__partitioned_8hpp" name="boost/algorithm/cxx11/is_partitioned.hpp">
<para>Tell if a sequence is partitioned. </para><para><para>Marshall Clow </para>

</para><namespace name="boost">
<namespace name="algorithm">






































































































<function id="doxygen.is__partitioned_8hpp_1a0faf37d9c4365430d56ba1aa50e02d36" name="is_partitioned"><type>BOOST_CXX14_CONSTEXPR bool</type><template>
          <template-type-parameter name="InputIterator"/>
          <template-type-parameter name="UnaryPredicate"/>
        </template><parameter name="first"><paramtype>InputIterator</paramtype><description><para>The start of the input sequence </para></description></parameter><parameter name="last"><paramtype>InputIterator</paramtype><description><para>One past the end of the input sequence </para></description></parameter><parameter name="p"><paramtype>UnaryPredicate</paramtype><description><para>The predicate to test the values with </para></description></parameter><purpose>Tests to see if a sequence is partitioned according to a predicate. In other words, all the items in the sequence that satisfy the predicate are at the beginning of the sequence. </purpose><description><para>
<note><para>This function is part of the C++2011 standard library. </para>
</note>
</para></description></function>
<function id="doxygen.is__partitioned_8hpp_1aaba075662456f8c155028fa93f29fe37" name="is_partitioned"><type>BOOST_CXX14_CONSTEXPR bool</type><template>
          <template-type-parameter name="Range"/>
          <template-type-parameter name="UnaryPredicate"/>
        </template><parameter name="r"><paramtype>const Range &amp;</paramtype><description><para>The input range </para></description></parameter><parameter name="p"><paramtype>UnaryPredicate</paramtype><description><para>The predicate to test the values with </para></description></parameter><purpose>Tests to see if a sequence is partitioned according to a predicate. In other words, all the items in the sequence that satisfy the predicate are at the beginning of the sequence. </purpose><description><para>
</para></description></function>
















































</namespace>




















</namespace>
</header>
<header id="doxygen.cxx11_2is__permutation_8hpp" name="boost/algorithm/cxx11/is_permutation.hpp">
<para>Is a sequence a permutation of another sequence. </para><para><para>Marshall Clow </para>

</para><namespace name="boost">
<namespace name="algorithm">


































































































<function id="doxygen.cxx11_2is__permutation_8hpp_1a1f77677e9b7dcd71bddb387b87bdac71" name="is_permutation"><type>bool</type><template>
          <template-type-parameter name="ForwardIterator1"/>
          <template-type-parameter name="ForwardIterator2"/>
          <template-type-parameter name="BinaryPredicate"/>
        </template><parameter name="first1"><paramtype>ForwardIterator1</paramtype><description><para>The start of the input sequence </para></description></parameter><parameter name="last1"><paramtype>ForwardIterator1</paramtype><description><para>One past the end of the input sequence </para></description></parameter><parameter name="first2"><paramtype>ForwardIterator2</paramtype><description><para>The start of the second sequence </para></description></parameter><parameter name="p"><paramtype>BinaryPredicate</paramtype><description><para>The predicate to compare elements with</para></description></parameter><purpose>Tests to see if the sequence [first,last) is a permutation of the sequence starting at first2. </purpose><description><para>
<note><para>This function is part of the C++2011 standard library. </para>
</note>
</para></description></function>
<function id="doxygen.cxx11_2is__permutation_8hpp_1a7e0bcba410642be1d60ca594b9ae72f7" name="is_permutation"><type>bool</type><template>
          <template-type-parameter name="ForwardIterator1"/>
          <template-type-parameter name="ForwardIterator2"/>
        </template><parameter name="first1"><paramtype>ForwardIterator1</paramtype><description><para>The start of the input sequence </para></description></parameter><parameter name="last1"><paramtype>ForwardIterator1</paramtype></parameter><parameter name="first2"><paramtype>ForwardIterator2</paramtype><description><para>The start of the second sequence </para></description></parameter><purpose>Tests to see if the sequence [first,last) is a permutation of the sequence starting at first2. </purpose><description><para>
<note><para>This function is part of the C++2011 standard library. </para>
</note>
</para></description></function>
<function id="doxygen.cxx11_2is__permutation_8hpp_1a07169b57d756fb42679cc028c59f83d7" name="is_permutation"><type>bool</type><template>
          <template-type-parameter name="Range"/>
          <template-type-parameter name="ForwardIterator"/>
        </template><parameter name="r"><paramtype>const Range &amp;</paramtype><description><para>The input range </para></description></parameter><parameter name="first2"><paramtype>ForwardIterator</paramtype><description><para>The start of the second sequence </para></description></parameter><purpose>Tests to see if the sequence [first,last) is a permutation of the sequence starting at first2. </purpose><description><para>
</para></description></function>
<function id="doxygen.cxx11_2is__permutation_8hpp_1aebca04c91ca9b165673d62d7812144f2" name="is_permutation"><type>boost::disable_if_c&lt; boost::is_same&lt; Range, ForwardIterator &gt;::value, bool &gt;::type</type><template>
          <template-type-parameter name="Range"/>
          <template-type-parameter name="ForwardIterator"/>
          <template-type-parameter name="BinaryPredicate"/>
        </template><parameter name="r"><paramtype>const Range &amp;</paramtype><description><para>The input range </para></description></parameter><parameter name="first2"><paramtype>ForwardIterator</paramtype><description><para>The start of the second sequence </para></description></parameter><parameter name="pred"><paramtype>BinaryPredicate</paramtype><description><para>The predicate to compare elements with </para></description></parameter><purpose>Tests to see if the sequence [first,last) is a permutation of the sequence starting at first2. </purpose><description><para>
</para></description></function>


















































</namespace>




















</namespace>
</header>
<header id="doxygen.cxx14_2is__permutation_8hpp" name="boost/algorithm/cxx14/is_permutation.hpp">
<para>Is a sequence a permutation of another sequence (four iterator versions) </para><para><para>Marshall Clow </para>

</para><namespace name="boost">
<namespace name="algorithm">


































































































































<function id="doxygen.cxx14_2is__permutation_8hpp_1a27358f3b075a78f08de2f83c4dd24579" name="is_permutation"><type>bool</type><template>
          <template-type-parameter name="ForwardIterator1"/>
          <template-type-parameter name="ForwardIterator2"/>
        </template><parameter name="first1"><paramtype>ForwardIterator1</paramtype><description><para>The start of the input sequence </para></description></parameter><parameter name="last1"><paramtype>ForwardIterator1</paramtype><description><para>One past the end of the second sequence </para></description></parameter><parameter name="first2"><paramtype>ForwardIterator2</paramtype><description><para>The start of the second sequence </para></description></parameter><parameter name="last2"><paramtype>ForwardIterator2</paramtype><description><para>One past the end of the input sequence </para></description></parameter><purpose>Tests to see if the sequence [first,last) is a permutation of the sequence starting at first2. </purpose><description><para>
<note><para>This function is part of the C++2014 standard library. </para>
</note>
</para></description></function>
<function id="doxygen.cxx14_2is__permutation_8hpp_1a825859459fbf0d99fd7a85613514cc3f" name="is_permutation"><type>bool</type><template>
          <template-type-parameter name="ForwardIterator1"/>
          <template-type-parameter name="ForwardIterator2"/>
          <template-type-parameter name="BinaryPredicate"/>
        </template><parameter name="first1"><paramtype>ForwardIterator1</paramtype><description><para>The start of the input sequence </para></description></parameter><parameter name="last1"><paramtype>ForwardIterator1</paramtype><description><para>One past the end of the input sequence </para></description></parameter><parameter name="first2"><paramtype>ForwardIterator2</paramtype><description><para>The start of the second sequence </para></description></parameter><parameter name="last2"><paramtype>ForwardIterator2</paramtype><description><para>One past the end of the second sequence </para></description></parameter><parameter name="pred"><paramtype>BinaryPredicate</paramtype><description><para>The predicate to compare elements with</para></description></parameter><purpose>Tests to see if the sequence [first,last) is a permutation of the sequence starting at first2. </purpose><description><para>
<note><para>This function is part of the C++2014 standard library. </para>
</note>
</para></description></function>




















</namespace>




















</namespace>
</header>
<header id="doxygen.is__sorted_8hpp" name="boost/algorithm/cxx11/is_sorted.hpp">
<namespace name="boost">
<namespace name="algorithm">


















































































<function id="doxygen.is__sorted_8hpp_1a8cb4f93a99a1fd52273acb6e99b9839f" name="is_sorted_until"><type>BOOST_CXX14_CONSTEXPR ForwardIterator</type><template>
          <template-type-parameter name="ForwardIterator"/>
          <template-type-parameter name="Pred"/>
        </template><parameter name="first"><paramtype>ForwardIterator</paramtype><description><para>The start of the sequence to be tested. </para></description></parameter><parameter name="last"><paramtype>ForwardIterator</paramtype><description><para>One past the end of the sequence </para></description></parameter><parameter name="p"><paramtype>Pred</paramtype><description><para>A binary predicate that returns true if two elements are ordered. </para></description></parameter><description><para>

</para></description><returns><para>the point in the sequence [first, last) where the elements are unordered (according to the comparison predicate 'p').</para>
</returns></function>
<function id="doxygen.is__sorted_8hpp_1aee4693ccf0d6ce5f49f0ffddcb07ae4b" name="is_sorted_until"><type>BOOST_CXX14_CONSTEXPR ForwardIterator</type><template>
          <template-type-parameter name="ForwardIterator"/>
        </template><parameter name="first"><paramtype>ForwardIterator</paramtype><description><para>The start of the sequence to be tested. </para></description></parameter><parameter name="last"><paramtype>ForwardIterator</paramtype><description><para>One past the end of the sequence </para></description></parameter><description><para>

</para></description><returns><para>the point in the sequence [first, last) where the elements are unordered</para>
</returns></function>
<function id="doxygen.is__sorted_8hpp_1aaf5cd0912dd265bf13df79f33579165c" name="is_sorted"><type>BOOST_CXX14_CONSTEXPR bool</type><template>
          <template-type-parameter name="ForwardIterator"/>
          <template-type-parameter name="Pred"/>
        </template><parameter name="first"><paramtype>ForwardIterator</paramtype><description><para>The start of the sequence to be tested. </para></description></parameter><parameter name="last"><paramtype>ForwardIterator</paramtype><description><para>One past the end of the sequence </para></description></parameter><parameter name="p"><paramtype>Pred</paramtype><description><para>A binary predicate that returns true if two elements are ordered. </para></description></parameter><description><para>

</para></description><returns><para>whether or not the entire sequence is sorted</para>
</returns></function>
<function id="doxygen.is__sorted_8hpp_1a47fc03a09ea42feb2609c6559409dcaf" name="is_sorted"><type>BOOST_CXX14_CONSTEXPR bool</type><template>
          <template-type-parameter name="ForwardIterator"/>
        </template><parameter name="first"><paramtype>ForwardIterator</paramtype><description><para>The start of the sequence to be tested. </para></description></parameter><parameter name="last"><paramtype>ForwardIterator</paramtype><description><para>One past the end of the sequence </para></description></parameter><description><para>

</para></description><returns><para>whether or not the entire sequence is sorted</para>
</returns></function>
<function id="doxygen.is__sorted_8hpp_1a3fe21207a79d423e85cc3d04d57ee9af" name="is_sorted_until"><type>BOOST_CXX14_CONSTEXPR boost::lazy_disable_if_c&lt; boost::is_same&lt; R, Pred &gt;::value, typenameboost::range_iterator&lt; constR &gt; &gt;::type</type><template>
          <template-type-parameter name="R"/>
          <template-type-parameter name="Pred"/>
        </template><parameter name="range"><paramtype>const R &amp;</paramtype><description><para>The range to be tested. </para></description></parameter><parameter name="p"><paramtype>Pred</paramtype><description><para>A binary predicate that returns true if two elements are ordered. </para></description></parameter><description><para>– Range based versions of the C++11 functions</para><para>

</para></description><returns><para>the point in the range R where the elements are unordered (according to the comparison predicate 'p').</para>
</returns></function>
<function id="doxygen.is__sorted_8hpp_1ab15c8125b0941bb0216c87d1afb11393" name="is_sorted_until"><type>BOOST_CXX14_CONSTEXPR boost::range_iterator&lt; constR &gt;::type</type><template>
          <template-type-parameter name="R"/>
        </template><parameter name="range"><paramtype>const R &amp;</paramtype><description><para>The range to be tested. </para></description></parameter><description><para>

</para></description><returns><para>the point in the range R where the elements are unordered</para>
</returns></function>
<function id="doxygen.is__sorted_8hpp_1adb7fdb06f3532311b0ac11323cbddac6" name="is_sorted"><type>BOOST_CXX14_CONSTEXPR boost::lazy_disable_if_c&lt; boost::is_same&lt; R, Pred &gt;::value, boost::type_identity&lt; bool &gt; &gt;::type</type><template>
          <template-type-parameter name="R"/>
          <template-type-parameter name="Pred"/>
        </template><parameter name="range"><paramtype>const R &amp;</paramtype><description><para>The range to be tested. </para></description></parameter><parameter name="p"><paramtype>Pred</paramtype><description><para>A binary predicate that returns true if two elements are ordered. </para></description></parameter><description><para>

</para></description><returns><para>whether or not the entire range R is sorted (according to the comparison predicate 'p').</para>
</returns></function>
<function id="doxygen.is__sorted_8hpp_1a8d484b729a9ac23861bc028afefae0cc" name="is_sorted"><type>BOOST_CXX14_CONSTEXPR bool</type><template>
          <template-type-parameter name="R"/>
        </template><parameter name="range"><paramtype>const R &amp;</paramtype><description><para>The range to be tested. </para></description></parameter><description><para>

</para></description><returns><para>whether or not the entire range R is sorted</para>
</returns></function>
<function id="doxygen.is__sorted_8hpp_1a8b76c64019b7f0a801b2cc65d2e887c3" name="is_increasing"><type>BOOST_CXX14_CONSTEXPR bool</type><template>
          <template-type-parameter name="ForwardIterator"/>
        </template><parameter name="first"><paramtype>ForwardIterator</paramtype><description><para>The start of the sequence to be tested. </para></description></parameter><parameter name="last"><paramtype>ForwardIterator</paramtype><description><para>One past the end of the sequence</para></description></parameter><description><para>– Range based versions of the C++11 functions</para><para>

<note><para>This function will return true for sequences that contain items that compare equal. If that is not what you intended, you should use is_strictly_increasing instead. </para>
</note>
</para></description><returns><para>true if the entire sequence is increasing; i.e, each item is greater than or <sbr/>
 equal to the previous one.</para>
</returns></function>
<function id="doxygen.is__sorted_8hpp_1ae230700ad6a18c821dc70aa621dac285" name="is_increasing"><type>BOOST_CXX14_CONSTEXPR bool</type><template>
          <template-type-parameter name="R"/>
        </template><parameter name="range"><paramtype>const R &amp;</paramtype><description><para>The range to be tested.</para></description></parameter><description><para>

<note><para>This function will return true for sequences that contain items that compare equal. If that is not what you intended, you should use is_strictly_increasing instead. </para>
</note>
</para></description><returns><para>true if the entire sequence is increasing; i.e, each item is greater than or <sbr/>
 equal to the previous one.</para>
</returns></function>
<function id="doxygen.is__sorted_8hpp_1ab2e692b64a10962abff688900537d5b7" name="is_decreasing"><type>BOOST_CXX14_CONSTEXPR bool</type><template>
          <template-type-parameter name="ForwardIterator"/>
        </template><parameter name="first"><paramtype>ForwardIterator</paramtype><description><para>The start of the sequence to be tested. </para></description></parameter><parameter name="last"><paramtype>ForwardIterator</paramtype><description><para>One past the end of the sequence</para></description></parameter><description><para>

<note><para>This function will return true for sequences that contain items that compare equal. If that is not what you intended, you should use is_strictly_decreasing instead. </para>
</note>
</para></description><returns><para>true if the entire sequence is decreasing; i.e, each item is less than or equal to the previous one.</para>
</returns></function>
<function id="doxygen.is__sorted_8hpp_1a62e0992366a0a760c538cf3672bfce38" name="is_decreasing"><type>BOOST_CXX14_CONSTEXPR bool</type><template>
          <template-type-parameter name="R"/>
        </template><parameter name="range"><paramtype>const R &amp;</paramtype><description><para>The range to be tested.</para></description></parameter><description><para>

<note><para>This function will return true for sequences that contain items that compare equal. If that is not what you intended, you should use is_strictly_decreasing instead. </para>
</note>
</para></description><returns><para>true if the entire sequence is decreasing; i.e, each item is less than or equal to the previous one.</para>
</returns></function>
<function id="doxygen.is__sorted_8hpp_1a1cda96ed1c5d92c74de5ab82c7c81d2c" name="is_strictly_increasing"><type>BOOST_CXX14_CONSTEXPR bool</type><template>
          <template-type-parameter name="ForwardIterator"/>
        </template><parameter name="first"><paramtype>ForwardIterator</paramtype><description><para>The start of the sequence to be tested. </para></description></parameter><parameter name="last"><paramtype>ForwardIterator</paramtype><description><para>One past the end of the sequence</para></description></parameter><description><para>

<note><para>This function will return false for sequences that contain items that compare equal. If that is not what you intended, you should use is_increasing instead. </para>
</note>
</para></description><returns><para>true if the entire sequence is strictly increasing; i.e, each item is greater than the previous one</para>
</returns></function>
<function id="doxygen.is__sorted_8hpp_1ae7797326192c40abc1a7e3fe28ddba89" name="is_strictly_increasing"><type>BOOST_CXX14_CONSTEXPR bool</type><template>
          <template-type-parameter name="R"/>
        </template><parameter name="range"><paramtype>const R &amp;</paramtype><description><para>The range to be tested.</para></description></parameter><description><para>

<note><para>This function will return false for sequences that contain items that compare equal. If that is not what you intended, you should use is_increasing instead. </para>
</note>
</para></description><returns><para>true if the entire sequence is strictly increasing; i.e, each item is greater than the previous one</para>
</returns></function>
<function id="doxygen.is__sorted_8hpp_1ad1c39536c9f84ff94fa0587242832a78" name="is_strictly_decreasing"><type>BOOST_CXX14_CONSTEXPR bool</type><template>
          <template-type-parameter name="ForwardIterator"/>
        </template><parameter name="first"><paramtype>ForwardIterator</paramtype><description><para>The start of the sequence to be tested. </para></description></parameter><parameter name="last"><paramtype>ForwardIterator</paramtype><description><para>One past the end of the sequence</para></description></parameter><description><para>

<note><para>This function will return false for sequences that contain items that compare equal. If that is not what you intended, you should use is_decreasing instead. </para>
</note>
</para></description><returns><para>true if the entire sequence is strictly decreasing; i.e, each item is less than the previous one</para>
</returns></function>
<function id="doxygen.is__sorted_8hpp_1a3ab88da04370e6a17a800ccd48745f3d" name="is_strictly_decreasing"><type>BOOST_CXX14_CONSTEXPR bool</type><template>
          <template-type-parameter name="R"/>
        </template><parameter name="range"><paramtype>const R &amp;</paramtype><description><para>The range to be tested.</para></description></parameter><description><para>

<note><para>This function will return false for sequences that contain items that compare equal. If that is not what you intended, you should use is_decreasing instead. </para>
</note>
</para></description><returns><para>true if the entire sequence is strictly decreasing; i.e, each item is less than the previous one</para>
</returns></function>






















































</namespace>




















</namespace>
</header>
<header id="doxygen.none__of_8hpp" name="boost/algorithm/cxx11/none_of.hpp">
<para>Test ranges to see if no elements match a value or predicate. </para><para><para>Marshall Clow </para>

</para><namespace name="boost">
<namespace name="algorithm">














































































<function id="doxygen.none__of_8hpp_1aed3d34d2db159dc55e082b92aa7cb273" name="none_of"><type>BOOST_CXX14_CONSTEXPR bool</type><template>
          <template-type-parameter name="InputIterator"/>
          <template-type-parameter name="Predicate"/>
        </template><parameter name="first"><paramtype>InputIterator</paramtype><description><para>The start of the input sequence </para></description></parameter><parameter name="last"><paramtype>InputIterator</paramtype><description><para>One past the end of the input sequence </para></description></parameter><parameter name="p"><paramtype>Predicate</paramtype><description><para>A predicate for testing the elements of the sequence </para></description></parameter><description><para>
<note><para>returns true on an empty range</para>
</note>

</para></description><returns><para>true if none of the elements in [first, last) satisfy the predicate 'p' </para>
</returns></function>
<function id="doxygen.none__of_8hpp_1a7ddecfdce5253c453b2d96a6b21fca0f" name="none_of"><type>BOOST_CXX14_CONSTEXPR bool</type><template>
          <template-type-parameter name="Range"/>
          <template-type-parameter name="Predicate"/>
        </template><parameter name="r"><paramtype>const Range &amp;</paramtype><description><para>The input range </para></description></parameter><parameter name="p"><paramtype>Predicate</paramtype><description><para>A predicate for testing the elements of the range </para></description></parameter><description><para>
<note><para>returns true on an empty range</para>
</note>

</para></description><returns><para>true if none of the elements in the range satisfy the predicate 'p' </para>
</returns></function>
<function id="doxygen.none__of_8hpp_1a2698672e5fb33d845ced564af04a1e94" name="none_of_equal"><type>BOOST_CXX14_CONSTEXPR bool</type><template>
          <template-type-parameter name="InputIterator"/>
          <template-type-parameter name="V"/>
        </template><parameter name="first"><paramtype>InputIterator</paramtype><description><para>The start of the input sequence </para></description></parameter><parameter name="last"><paramtype>InputIterator</paramtype><description><para>One past the end of the input sequence </para></description></parameter><parameter name="val"><paramtype>const V &amp;</paramtype><description><para>A value to compare against </para></description></parameter><description><para>
<note><para>returns true on an empty range</para>
</note>

</para></description><returns><para>true if none of the elements in [first, last) are equal to 'val' </para>
</returns></function>
<function id="doxygen.none__of_8hpp_1aa1f4d384827a8b02b8480125f93c044c" name="none_of_equal"><type>BOOST_CXX14_CONSTEXPR bool</type><template>
          <template-type-parameter name="Range"/>
          <template-type-parameter name="V"/>
        </template><parameter name="r"><paramtype>const Range &amp;</paramtype><description><para>The input range </para></description></parameter><parameter name="val"><paramtype>const V &amp;</paramtype><description><para>A value to compare against </para></description></parameter><description><para>
<note><para>returns true on an empty range</para>
</note>

</para></description><returns><para>true if none of the elements in the range are equal to 'val' </para>
</returns></function>






































































</namespace>




















</namespace>
</header>
<header id="doxygen.one__of_8hpp" name="boost/algorithm/cxx11/one_of.hpp">
<para>Test ranges to see if only one element matches a value or predicate. </para><para><para>Marshall Clow </para>

</para><namespace name="boost">
<namespace name="algorithm">










































































<function id="doxygen.one__of_8hpp_1a20969730db3609d38ab460c8d031b910" name="one_of"><type>BOOST_CXX14_CONSTEXPR bool</type><template>
          <template-type-parameter name="InputIterator"/>
          <template-type-parameter name="Predicate"/>
        </template><parameter name="first"><paramtype>InputIterator</paramtype><description><para>The start of the input sequence </para></description></parameter><parameter name="last"><paramtype>InputIterator</paramtype><description><para>One past the end of the input sequence </para></description></parameter><parameter name="p"><paramtype>Predicate</paramtype><description><para>A predicate for testing the elements of the sequence </para></description></parameter><description><para>

</para></description><returns><para>true if the predicate 'p' is true for exactly one item in [first, last).</para>
</returns></function>
<function id="doxygen.one__of_8hpp_1ab2427cd53b1c537d546f2315d65a9c1d" name="one_of"><type>BOOST_CXX14_CONSTEXPR bool</type><template>
          <template-type-parameter name="Range"/>
          <template-type-parameter name="Predicate"/>
        </template><parameter name="r"><paramtype>const Range &amp;</paramtype><description><para>The input range </para></description></parameter><parameter name="p"><paramtype>Predicate</paramtype><description><para>A predicate for testing the elements of the range </para></description></parameter><description><para>

</para></description><returns><para>true if the predicate 'p' is true for exactly one item in the range.</para>
</returns></function>
<function id="doxygen.one__of_8hpp_1aa89ff84fa602e0379c19d7d791e5e541" name="one_of_equal"><type>BOOST_CXX14_CONSTEXPR bool</type><template>
          <template-type-parameter name="InputIterator"/>
          <template-type-parameter name="V"/>
        </template><parameter name="first"><paramtype>InputIterator</paramtype><description><para>The start of the input sequence </para></description></parameter><parameter name="last"><paramtype>InputIterator</paramtype><description><para>One past the end of the input sequence </para></description></parameter><parameter name="val"><paramtype>const V &amp;</paramtype><description><para>A value to compare against </para></description></parameter><description><para>

</para></description><returns><para>true if the value 'val' exists only once in [first, last).</para>
</returns></function>
<function id="doxygen.one__of_8hpp_1aabfe0770ae3a90a160b2aa8f7a424e7d" name="one_of_equal"><type>BOOST_CXX14_CONSTEXPR bool</type><template>
          <template-type-parameter name="Range"/>
          <template-type-parameter name="V"/>
        </template><parameter name="r"><paramtype>const Range &amp;</paramtype><description><para>The input range </para></description></parameter><parameter name="val"><paramtype>const V &amp;</paramtype><description><para>A value to compare against </para></description></parameter><description><para>

</para></description><returns><para>true if the value 'val' exists only once in the range.</para>
</returns></function>










































































</namespace>




















</namespace>
</header>
<header id="doxygen.partition__copy_8hpp" name="boost/algorithm/cxx11/partition_copy.hpp">
<para>Copy a subset of a sequence to a new sequence. </para><para><para>Marshall Clow </para>

</para><namespace name="boost">
<namespace name="algorithm">








































































<function id="doxygen.partition__copy_8hpp_1a78a338dd346e6e350305c74785e01b6b" name="partition_copy"><type>BOOST_CXX14_CONSTEXPR std::pair&lt; OutputIterator1, OutputIterator2 &gt;</type><template>
          <template-type-parameter name="InputIterator"/>
          <template-type-parameter name="OutputIterator1"/>
          <template-type-parameter name="OutputIterator2"/>
          <template-type-parameter name="UnaryPredicate"/>
        </template><parameter name="first"><paramtype>InputIterator</paramtype><description><para>The start of the input sequence </para></description></parameter><parameter name="last"><paramtype>InputIterator</paramtype><description><para>One past the end of the input sequence </para></description></parameter><parameter name="out_true"><paramtype>OutputIterator1</paramtype><description><para>An output iterator to write the elements that satisfy the predicate into </para></description></parameter><parameter name="out_false"><paramtype>OutputIterator2</paramtype><description><para>An output iterator to write the elements that do not satisfy the predicate into </para></description></parameter><parameter name="p"><paramtype>UnaryPredicate</paramtype><description><para>A predicate for dividing the elements of the input sequence.</para></description></parameter><purpose>Copies the elements that satisfy the predicate p from the range [first, last) to the range beginning at d_first_true, and copies the elements that do not satisfy p to the range beginning at d_first_false. </purpose><description><para>
<note><para>This function is part of the C++2011 standard library. </para>
</note>
</para></description></function>
<function id="doxygen.partition__copy_8hpp_1ae9eefbc85f14954f41dba04d15626acd" name="partition_copy"><type>BOOST_CXX14_CONSTEXPR std::pair&lt; OutputIterator1, OutputIterator2 &gt;</type><template>
          <template-type-parameter name="Range"/>
          <template-type-parameter name="OutputIterator1"/>
          <template-type-parameter name="OutputIterator2"/>
          <template-type-parameter name="UnaryPredicate"/>
        </template><parameter name="r"><paramtype>const Range &amp;</paramtype><description><para>The input range </para></description></parameter><parameter name="out_true"><paramtype>OutputIterator1</paramtype><description><para>An output iterator to write the elements that satisfy the predicate into </para></description></parameter><parameter name="out_false"><paramtype>OutputIterator2</paramtype><description><para>An output iterator to write the elements that do not satisfy the predicate into </para></description></parameter><parameter name="p"><paramtype>UnaryPredicate</paramtype><description><para>A predicate for dividing the elements of the input sequence. </para></description></parameter><description><para>
</para></description></function>














































































</namespace>




















</namespace>
</header>
<header id="doxygen.partition__point_8hpp" name="boost/algorithm/cxx11/partition_point.hpp">
<para>Find the partition point in a sequence. </para><para><para>Marshall Clow </para>

</para><namespace name="boost">
<namespace name="algorithm">






































































<function id="doxygen.partition__point_8hpp_1a091fbc69ba946a2b0abd50b0096a4e6f" name="partition_point"><type>ForwardIterator</type><template>
          <template-type-parameter name="ForwardIterator"/>
          <template-type-parameter name="Predicate"/>
        </template><parameter name="first"><paramtype>ForwardIterator</paramtype><description><para>The start of the input sequence </para></description></parameter><parameter name="last"><paramtype>ForwardIterator</paramtype><description><para>One past the end of the input sequence </para></description></parameter><parameter name="p"><paramtype>Predicate</paramtype><description><para>The predicate to test the values with </para></description></parameter><purpose>Given a partitioned range, returns the partition point, i.e, the first element that does not satisfy p. </purpose><description><para>
<note><para>This function is part of the C++2011 standard library. </para>
</note>
</para></description></function>
<function id="doxygen.partition__point_8hpp_1ae40d3dcdfbe6bc39c36d77d3902757cf" name="partition_point"><type>boost::range_iterator&lt; Range &gt;::type</type><template>
          <template-type-parameter name="Range"/>
          <template-type-parameter name="Predicate"/>
        </template><parameter name="r"><paramtype>Range &amp;</paramtype><description><para>The input range </para></description></parameter><parameter name="p"><paramtype>Predicate</paramtype><description><para>The predicate to test the values with </para></description></parameter><purpose>Given a partitioned range, returns the partition point. </purpose><description><para>
</para></description></function>
















































































</namespace>




















</namespace>
</header>
<header id="doxygen.equal_8hpp" name="boost/algorithm/cxx14/equal.hpp">
<para>Test ranges to if they are equal. </para><para><para>Marshall Clow </para>

</para><namespace name="boost">
<namespace name="algorithm">




































































































































<function id="doxygen.equal_8hpp_1aebe41f3a5fc7dc7e77baa1c2c45f0a23" name="equal"><type>BOOST_CXX14_CONSTEXPR bool</type><template>
          <template-type-parameter name="InputIterator1"/>
          <template-type-parameter name="InputIterator2"/>
          <template-type-parameter name="BinaryPredicate"/>
        </template><parameter name="first1"><paramtype>InputIterator1</paramtype><description><para>The start of the first range. </para></description></parameter><parameter name="last1"><paramtype>InputIterator1</paramtype><description><para>One past the end of the first range. </para></description></parameter><parameter name="first2"><paramtype>InputIterator2</paramtype><description><para>The start of the second range. </para></description></parameter><parameter name="last2"><paramtype>InputIterator2</paramtype><description><para>One past the end of the second range. </para></description></parameter><parameter name="pred"><paramtype>BinaryPredicate</paramtype><description><para>A predicate for comparing the elements of the ranges </para></description></parameter><description><para>

</para></description><returns><para>true if all elements in the two ranges are equal</para>
</returns></function>
<function id="doxygen.equal_8hpp_1a1515c7a4d315cb7d7fe7ac93c9f67936" name="equal"><type>BOOST_CXX14_CONSTEXPR bool</type><template>
          <template-type-parameter name="InputIterator1"/>
          <template-type-parameter name="InputIterator2"/>
        </template><parameter name="first1"><paramtype>InputIterator1</paramtype><description><para>The start of the first range. </para></description></parameter><parameter name="last1"><paramtype>InputIterator1</paramtype><description><para>One past the end of the first range. </para></description></parameter><parameter name="first2"><paramtype>InputIterator2</paramtype><description><para>The start of the second range. </para></description></parameter><parameter name="last2"><paramtype>InputIterator2</paramtype><description><para>One past the end of the second range. </para></description></parameter><description><para>

</para></description><returns><para>true if all elements in the two ranges are equal</para>
</returns></function>


















</namespace>




















</namespace>
</header>
<header id="doxygen.mismatch_8hpp" name="boost/algorithm/cxx14/mismatch.hpp">
<para>Find the first mismatched element in a sequence. </para><para><para>Marshall Clow </para>

</para><namespace name="boost">
<namespace name="algorithm">
































































































































<function id="doxygen.mismatch_8hpp_1a441f47ef1f63174a1a27a24d4b128c7d" name="mismatch"><type>BOOST_CXX14_CONSTEXPR std::pair&lt; InputIterator1, InputIterator2 &gt;</type><template>
          <template-type-parameter name="InputIterator1"/>
          <template-type-parameter name="InputIterator2"/>
          <template-type-parameter name="BinaryPredicate"/>
        </template><parameter name="first1"><paramtype>InputIterator1</paramtype><description><para>The start of the first range. </para></description></parameter><parameter name="last1"><paramtype>InputIterator1</paramtype><description><para>One past the end of the first range. </para></description></parameter><parameter name="first2"><paramtype>InputIterator2</paramtype><description><para>The start of the second range. </para></description></parameter><parameter name="last2"><paramtype>InputIterator2</paramtype><description><para>One past the end of the second range. </para></description></parameter><parameter name="pred"><paramtype>BinaryPredicate</paramtype><description><para>A predicate for comparing the elements of the ranges </para></description></parameter><description><para>

</para></description><returns><para>a pair of iterators pointing to the first elements in the sequence that do not match</para>
</returns></function>
<function id="doxygen.mismatch_8hpp_1a8d9429a55dbe7a99e8c485da5a9c726d" name="mismatch"><type>BOOST_CXX14_CONSTEXPR std::pair&lt; InputIterator1, InputIterator2 &gt;</type><template>
          <template-type-parameter name="InputIterator1"/>
          <template-type-parameter name="InputIterator2"/>
        </template><parameter name="first1"><paramtype>InputIterator1</paramtype><description><para>The start of the first range. </para></description></parameter><parameter name="last1"><paramtype>InputIterator1</paramtype><description><para>One past the end of the first range. </para></description></parameter><parameter name="first2"><paramtype>InputIterator2</paramtype><description><para>The start of the second range. </para></description></parameter><parameter name="last2"><paramtype>InputIterator2</paramtype><description><para>One past the end of the second range. </para></description></parameter><description><para>

</para></description><returns><para>a pair of iterators pointing to the first elements in the sequence that do not match</para>
</returns></function>






















</namespace>




















</namespace>
</header>
<header id="doxygen.exclusive__scan_8hpp" name="boost/algorithm/cxx17/exclusive_scan.hpp">
<para>??? </para><para><para>Marshall Clow </para>

</para><namespace name="boost">
<namespace name="algorithm">






















































































































































<function id="doxygen.exclusive__scan_8hpp_1a70dfd03df68a3ef123f5e0a955313a21" name="exclusive_scan"><type>OutputIterator</type><template>
          <template-type-parameter name="InputIterator"/>
          <template-type-parameter name="OutputIterator"/>
          <template-type-parameter name="T"/>
          <template-type-parameter name="BinaryOperation"/>
        </template><parameter name="first"><paramtype>InputIterator</paramtype></parameter><parameter name="last"><paramtype>InputIterator</paramtype></parameter><parameter name="result"><paramtype>OutputIterator</paramtype></parameter><parameter name="init"><paramtype>T</paramtype></parameter><parameter name="bOp"><paramtype>BinaryOperation</paramtype></parameter></function>
<function id="doxygen.exclusive__scan_8hpp_1a70ab3f33b822f9bf5d507c42d7a60b4c" name="exclusive_scan"><type>OutputIterator</type><template>
          <template-type-parameter name="InputIterator"/>
          <template-type-parameter name="OutputIterator"/>
          <template-type-parameter name="T"/>
        </template><parameter name="first"><paramtype>InputIterator</paramtype></parameter><parameter name="last"><paramtype>InputIterator</paramtype></parameter><parameter name="result"><paramtype>OutputIterator</paramtype></parameter><parameter name="init"><paramtype>T</paramtype></parameter></function>
</namespace>




















</namespace>
</header>
<header id="doxygen.for__each__n_8hpp" name="boost/algorithm/cxx17/for_each_n.hpp">
<para>Apply a functor to the elements of a sequence. </para><para><para>Marshall Clow </para>

</para><namespace name="boost">
<namespace name="algorithm">





















































































































































<function id="doxygen.for__each__n_8hpp_1a0f25d8329085158713c61aef63b1fee7" name="for_each_n"><type>InputIterator</type><template>
          <template-type-parameter name="InputIterator"/>
          <template-type-parameter name="Size"/>
          <template-type-parameter name="Function"/>
        </template><parameter name="first"><paramtype>InputIterator</paramtype><description><para>The start of the first range. </para></description></parameter><parameter name="n"><paramtype>Size</paramtype><description><para>One past the end of the first range. </para></description></parameter><parameter name="f"><paramtype>Function</paramtype><description><para>A functor to apply to the elements of the sequence </para></description></parameter><description><para>

<note><para>If f returns a result, the result is ignored. </para>
</note>
</para></description><returns><para>first + n</para>
</returns></function>


</namespace>




















</namespace>
</header>
<header id="doxygen.inclusive__scan_8hpp" name="boost/algorithm/cxx17/inclusive_scan.hpp">
<namespace name="boost">
<namespace name="algorithm">


















































































































































<function id="doxygen.inclusive__scan_8hpp_1a8ad13e5bad2b779d804d4412166c4dc4" name="inclusive_scan"><type>OutputIterator</type><template>
          <template-type-parameter name="InputIterator"/>
          <template-type-parameter name="OutputIterator"/>
          <template-type-parameter name="T"/>
          <template-type-parameter name="BinaryOperation"/>
        </template><parameter name="first"><paramtype>InputIterator</paramtype></parameter><parameter name="last"><paramtype>InputIterator</paramtype></parameter><parameter name="result"><paramtype>OutputIterator</paramtype></parameter><parameter name="bOp"><paramtype>BinaryOperation</paramtype></parameter><parameter name="init"><paramtype>T</paramtype></parameter></function>
<function id="doxygen.inclusive__scan_8hpp_1ac0ae7b149973d56eb47677c3ad834156" name="inclusive_scan"><type>OutputIterator</type><template>
          <template-type-parameter name="InputIterator"/>
          <template-type-parameter name="OutputIterator"/>
          <template-type-parameter name="BinaryOperation"/>
        </template><parameter name="first"><paramtype>InputIterator</paramtype></parameter><parameter name="last"><paramtype>InputIterator</paramtype></parameter><parameter name="result"><paramtype>OutputIterator</paramtype></parameter><parameter name="bOp"><paramtype>BinaryOperation</paramtype></parameter></function>
<function id="doxygen.inclusive__scan_8hpp_1ad4c970d1646a65a763ba33ebde8e7a60" name="inclusive_scan"><type>OutputIterator</type><template>
          <template-type-parameter name="InputIterator"/>
          <template-type-parameter name="OutputIterator"/>
        </template><parameter name="first"><paramtype>InputIterator</paramtype></parameter><parameter name="last"><paramtype>InputIterator</paramtype></parameter><parameter name="result"><paramtype>OutputIterator</paramtype></parameter></function>



</namespace>




















</namespace>
</header>
<header id="doxygen.reduce_8hpp" name="boost/algorithm/cxx17/reduce.hpp">
<para>Combine the elements of a sequence into a single value. </para><para><para>Marshall Clow </para>

</para><namespace name="boost">
<namespace name="algorithm">












































































































































<function id="doxygen.reduce_8hpp_1a06390ed07f6961033550b1e72cf6a48d" name="reduce"><type>T</type><template>
          <template-type-parameter name="InputIterator"/>
          <template-type-parameter name="T"/>
          <template-type-parameter name="BinaryOperation"/>
        </template><parameter name="first"><paramtype>InputIterator</paramtype></parameter><parameter name="last"><paramtype>InputIterator</paramtype></parameter><parameter name="init"><paramtype>T</paramtype></parameter><parameter name="bOp"><paramtype>BinaryOperation</paramtype></parameter></function>
<function id="doxygen.reduce_8hpp_1ad93ec132b585c5d5a07794564d3a8760" name="reduce"><type>T</type><template>
          <template-type-parameter name="InputIterator"/>
          <template-type-parameter name="T"/>
        </template><parameter name="first"><paramtype>InputIterator</paramtype></parameter><parameter name="last"><paramtype>InputIterator</paramtype></parameter><parameter name="init"><paramtype>T</paramtype></parameter></function>
<function id="doxygen.reduce_8hpp_1a736d80b99292ca4a995f370ac10289b0" name="reduce"><type>std::iterator_traits&lt; InputIterator &gt;::value_type</type><template>
          <template-type-parameter name="InputIterator"/>
        </template><parameter name="first"><paramtype>InputIterator</paramtype></parameter><parameter name="last"><paramtype>InputIterator</paramtype></parameter></function>
<function id="doxygen.reduce_8hpp_1ad699a917cf7b35b68a8638694e0042e7" name="reduce"><type>boost::range_value&lt; Range &gt;::type</type><template>
          <template-type-parameter name="Range"/>
        </template><parameter name="r"><paramtype>const Range &amp;</paramtype></parameter></function>
<function id="doxygen.reduce_8hpp_1ac68d811f1f577f11300529e3958afe3d" name="reduce"><type>T</type><template>
          <template-type-parameter name="Range"/>
          <template-type-parameter name="T"/>
        </template><parameter name="r"><paramtype>const Range &amp;</paramtype></parameter><parameter name="init"><paramtype>T</paramtype></parameter></function>
<function id="doxygen.reduce_8hpp_1ad15d7170de4170538935cbbf91f13167" name="reduce"><type>T</type><template>
          <template-type-parameter name="Range"/>
          <template-type-parameter name="T"/>
          <template-type-parameter name="BinaryOperation"/>
        </template><parameter name="r"><paramtype>const Range &amp;</paramtype></parameter><parameter name="init"><paramtype>T</paramtype></parameter><parameter name="bOp"><paramtype>BinaryOperation</paramtype></parameter></function>






</namespace>




















</namespace>
</header>
<header id="doxygen.transform__exclusive__scan_8hpp" name="boost/algorithm/cxx17/transform_exclusive_scan.hpp">
<para>???? </para><para><para>Marshall Clow </para>

</para><namespace name="boost">
<namespace name="algorithm">











































































































































<function id="doxygen.transform__exclusive__scan_8hpp_1a835bdb248596360faf2bb9f69129c737" name="transform_exclusive_scan"><type>OutputIterator</type><template>
          <template-type-parameter name="InputIterator"/>
          <template-type-parameter name="OutputIterator"/>
          <template-type-parameter name="T"/>
          <template-type-parameter name="BinaryOperation"/>
          <template-type-parameter name="UnaryOperation"/>
        </template><parameter name="first"><paramtype>InputIterator</paramtype></parameter><parameter name="last"><paramtype>InputIterator</paramtype></parameter><parameter name="result"><paramtype>OutputIterator</paramtype></parameter><parameter name="init"><paramtype>T</paramtype></parameter><parameter name="bOp"><paramtype>BinaryOperation</paramtype></parameter><parameter name="uOp"><paramtype>UnaryOperation</paramtype></parameter></function>












</namespace>




















</namespace>
</header>
<header id="doxygen.transform__inclusive__scan_8hpp" name="boost/algorithm/cxx17/transform_inclusive_scan.hpp">
<namespace name="boost">
<namespace name="algorithm">









































































































































<function id="doxygen.transform__inclusive__scan_8hpp_1a77104cc8d9d22a297fd80aeff9bec5aa" name="transform_inclusive_scan"><type>OutputIterator</type><template>
          <template-type-parameter name="InputIterator"/>
          <template-type-parameter name="OutputIterator"/>
          <template-type-parameter name="BinaryOperation"/>
          <template-type-parameter name="UnaryOperation"/>
          <template-type-parameter name="T"/>
        </template><parameter name="first"><paramtype>InputIterator</paramtype><description><para>The start of the input sequence </para></description><description><para>The start of the input sequence </para></description></parameter><parameter name="last"><paramtype>InputIterator</paramtype><description><para>The end of the input sequence </para></description><description><para>The end of the input sequence </para></description></parameter><parameter name="result"><paramtype>OutputIterator</paramtype><description><para>The output iterator to write the results into </para></description><description><para>The output iterator to write the results into </para></description></parameter><parameter name="bOp"><paramtype>BinaryOperation</paramtype><description><para>The operation for combining transformed input elements </para></description><description><para>The operation for combining transformed input elements </para></description></parameter><parameter name="uOp"><paramtype>UnaryOperation</paramtype><description><para>The operation for transforming input elements </para></description><description><para>The operation for transforming input elements</para></description></parameter><parameter name="init"><paramtype>T</paramtype><description><para>The initial value</para></description></parameter><purpose>Transforms elements from the input range with uOp and then combines those transformed elements with bOp such that the n-1th element and the nth element are combined. Inclusivity means that the nth element is included in the nth combination. </purpose><description><para>Transforms elements from the input range with uOp and then combines those transformed elements with bOp such that the n-1th element and the nth element are combined. Inclusivity means that the nth element is included in the nth combination. The first value will be used as the init.</para><para>

<note><para>This function is part of the C++17 standard library</para>
</note>


<note><para>This function is part of the C++17 standard library </para>
</note>
</para></description><returns><para>The updated output iterator</para>
</returns><returns><para>The updated output iterator</para>
</returns></function>
<function id="doxygen.transform__inclusive__scan_8hpp_1a3c7aabab339953e4c06a475d433663ad" name="transform_inclusive_scan"><type>OutputIterator</type><template>
          <template-type-parameter name="InputIterator"/>
          <template-type-parameter name="OutputIterator"/>
          <template-type-parameter name="BinaryOperation"/>
          <template-type-parameter name="UnaryOperation"/>
        </template><parameter name="first"><paramtype>InputIterator</paramtype></parameter><parameter name="last"><paramtype>InputIterator</paramtype></parameter><parameter name="result"><paramtype>OutputIterator</paramtype></parameter><parameter name="bOp"><paramtype>BinaryOperation</paramtype></parameter><parameter name="uOp"><paramtype>UnaryOperation</paramtype></parameter></function>













</namespace>




















</namespace>
</header>
<header id="doxygen.transform__reduce_8hpp" name="boost/algorithm/cxx17/transform_reduce.hpp">
<para>Combine the (transformed) elements of a sequence (or two) into a single value. </para><para><para>Marshall Clow </para>

</para><namespace name="boost">
<namespace name="algorithm">






































































































































<function id="doxygen.transform__reduce_8hpp_1aa64c69515bf761c06ba771ed2f82cb93" name="transform_reduce"><type>T</type><template>
          <template-type-parameter name="InputIterator1"/>
          <template-type-parameter name="InputIterator2"/>
          <template-type-parameter name="T"/>
          <template-type-parameter name="BinaryOperation1"/>
          <template-type-parameter name="BinaryOperation2"/>
        </template><parameter name="first1"><paramtype>InputIterator1</paramtype></parameter><parameter name="last1"><paramtype>InputIterator1</paramtype></parameter><parameter name="first2"><paramtype>InputIterator2</paramtype></parameter><parameter name="init"><paramtype>T</paramtype></parameter><parameter name="bOp1"><paramtype>BinaryOperation1</paramtype></parameter><parameter name="bOp2"><paramtype>BinaryOperation2</paramtype></parameter></function>
<function id="doxygen.transform__reduce_8hpp_1a49248595fd3189ea31f87a36764b6785" name="transform_reduce"><type>T</type><template>
          <template-type-parameter name="InputIterator"/>
          <template-type-parameter name="T"/>
          <template-type-parameter name="BinaryOperation"/>
          <template-type-parameter name="UnaryOperation"/>
        </template><parameter name="first"><paramtype>InputIterator</paramtype></parameter><parameter name="last"><paramtype>InputIterator</paramtype></parameter><parameter name="init"><paramtype>T</paramtype></parameter><parameter name="bOp"><paramtype>BinaryOperation</paramtype></parameter><parameter name="uOp"><paramtype>UnaryOperation</paramtype></parameter></function>
<function id="doxygen.transform__reduce_8hpp_1a24a08a95e060cf92e692cc6a5f5c673f" name="transform_reduce"><type>T</type><template>
          <template-type-parameter name="InputIterator1"/>
          <template-type-parameter name="InputIterator2"/>
          <template-type-parameter name="T"/>
        </template><parameter name="first1"><paramtype>InputIterator1</paramtype></parameter><parameter name="last1"><paramtype>InputIterator1</paramtype></parameter><parameter name="first2"><paramtype>InputIterator2</paramtype></parameter><parameter name="init"><paramtype>T</paramtype></parameter></function>















</namespace>




















</namespace>
</header>
<header id="doxygen.find__backward_8hpp" name="boost/algorithm/find_backward.hpp">
<namespace name="boost">
<namespace name="algorithm">






























<function id="doxygen.find__backward_8hpp_1a8cf6bb87810fc9a620a545617a1e8386" name="find_backward"><type>BOOST_CXX14_CONSTEXPR BidiIter</type><template>
          <template-type-parameter name="BidiIter"/>
          <template-type-parameter name="T"/>
        </template><parameter name="first"><paramtype>BidiIter</paramtype></parameter><parameter name="last"><paramtype>BidiIter</paramtype></parameter><parameter name="x"><paramtype>const T &amp;</paramtype></parameter></function>
<function id="doxygen.find__backward_8hpp_1a39efb7039bbd7465c37231ba1d63bca8" name="find_backward"><type>BOOST_CXX14_CONSTEXPR boost::range_iterator&lt; Range &gt;::type</type><template>
          <template-type-parameter name="Range"/>
          <template-type-parameter name="T"/>
        </template><parameter name="range"><paramtype>Range &amp;</paramtype></parameter><parameter name="x"><paramtype>const T &amp;</paramtype></parameter></function>
<function id="doxygen.find__backward_8hpp_1a81e46f549b821695a4bc7844112bfa35" name="find_not_backward"><type>BOOST_CXX14_CONSTEXPR BidiIter</type><template>
          <template-type-parameter name="BidiIter"/>
          <template-type-parameter name="T"/>
        </template><parameter name="first"><paramtype>BidiIter</paramtype></parameter><parameter name="last"><paramtype>BidiIter</paramtype></parameter><parameter name="x"><paramtype>const T &amp;</paramtype></parameter></function>
<function id="doxygen.find__backward_8hpp_1a67f5ecaff031608228aa18a9275c0089" name="find_not_backward"><type>BOOST_CXX14_CONSTEXPR boost::range_iterator&lt; Range &gt;::type</type><template>
          <template-type-parameter name="Range"/>
          <template-type-parameter name="T"/>
        </template><parameter name="range"><paramtype>Range &amp;</paramtype></parameter><parameter name="x"><paramtype>const T &amp;</paramtype></parameter></function>
<function id="doxygen.find__backward_8hpp_1a4d15b4cfc74601b4721decd1435f19bb" name="find_if_backward"><type>BOOST_CXX14_CONSTEXPR BidiIter</type><template>
          <template-type-parameter name="BidiIter"/>
          <template-type-parameter name="Pred"/>
        </template><parameter name="first"><paramtype>BidiIter</paramtype></parameter><parameter name="last"><paramtype>BidiIter</paramtype></parameter><parameter name="p"><paramtype>Pred</paramtype></parameter></function>
<function id="doxygen.find__backward_8hpp_1a483cd38e5fd05314d769b738275fc746" name="find_if_backward"><type>BOOST_CXX14_CONSTEXPR boost::range_iterator&lt; Range &gt;::type</type><template>
          <template-type-parameter name="Range"/>
          <template-type-parameter name="Pred"/>
        </template><parameter name="range"><paramtype>Range &amp;</paramtype></parameter><parameter name="p"><paramtype>Pred</paramtype></parameter></function>
<function id="doxygen.find__backward_8hpp_1acc29bcc89602afa2ea1b2af646778330" name="find_if_not_backward"><type>BOOST_CXX14_CONSTEXPR BidiIter</type><template>
          <template-type-parameter name="BidiIter"/>
          <template-type-parameter name="Pred"/>
        </template><parameter name="first"><paramtype>BidiIter</paramtype></parameter><parameter name="last"><paramtype>BidiIter</paramtype></parameter><parameter name="p"><paramtype>Pred</paramtype></parameter></function>
<function id="doxygen.find__backward_8hpp_1a057b5ad3407a003fb45897fd649d1196" name="find_if_not_backward"><type>BOOST_CXX14_CONSTEXPR boost::range_iterator&lt; Range &gt;::type</type><template>
          <template-type-parameter name="Range"/>
          <template-type-parameter name="Pred"/>
        </template><parameter name="range"><paramtype>Range &amp;</paramtype></parameter><parameter name="p"><paramtype>Pred</paramtype></parameter></function>


















































































































</namespace>




















</namespace>
</header>
<header id="doxygen.find__not_8hpp" name="boost/algorithm/find_not.hpp">
<namespace name="boost">
<namespace name="algorithm">




























<function id="doxygen.find__not_8hpp_1a5b4b5b16be71455bbfdc297bc8615d50" name="find_not"><type>BOOST_CXX14_CONSTEXPR InputIter</type><template>
          <template-type-parameter name="InputIter"/>
          <template-type-parameter name="Sentinel"/>
          <template-type-parameter name="T"/>
        </template><parameter name="first"><paramtype>InputIter</paramtype></parameter><parameter name="last"><paramtype>Sentinel</paramtype></parameter><parameter name="x"><paramtype>const T &amp;</paramtype></parameter></function>
<function id="doxygen.find__not_8hpp_1a5e462ba17d0f91a4912825ca29f7e961" name="find_not"><type>BOOST_CXX14_CONSTEXPR boost::range_iterator&lt; Range &gt;::type</type><template>
          <template-type-parameter name="Range"/>
          <template-type-parameter name="T"/>
        </template><parameter name="r"><paramtype>Range &amp;</paramtype></parameter><parameter name="x"><paramtype>const T &amp;</paramtype></parameter></function>


























































































































</namespace>




















</namespace>
</header>
<header id="doxygen.gather_8hpp" name="boost/algorithm/gather.hpp">
<namespace name="boost">
<namespace name="algorithm">


























<function id="doxygen.group__gather_1ga29f606e172cbc6cb7041823492ff3f1e" name="gather"><type>std::pair&lt; BidirectionalIterator, BidirectionalIterator &gt;</type><template>
          <template-type-parameter name="BidirectionalIterator"/>
          <template-type-parameter name="Pred"/>
        </template><parameter name="first"><paramtype>BidirectionalIterator</paramtype></parameter><parameter name="last"><paramtype>BidirectionalIterator</paramtype></parameter><parameter name="pivot"><paramtype>BidirectionalIterator</paramtype></parameter><parameter name="pred"><paramtype>Pred</paramtype></parameter><purpose>iterator-based gather implementation </purpose></function>
<function id="doxygen.group__gather_1ga98885e5373eb630387a09f5c3e1ff4ed" name="gather"><type>std::pair&lt; typename boost::range_iterator&lt; BidirectionalRange &gt;::type, typename boost::range_iterator&lt; BidirectionalRange &gt;::type &gt;</type><template>
          <template-type-parameter name="BidirectionalRange"/>
          <template-type-parameter name="Pred"/>
        </template><parameter name="range"><paramtype>BidirectionalRange &amp;</paramtype></parameter><parameter name="pivot"><paramtype>typename boost::range_iterator&lt; BidirectionalRange &gt;::type</paramtype></parameter><parameter name="pred"><paramtype>Pred</paramtype></parameter><purpose>range-based gather implementation </purpose></function>




























































































































</namespace>




















</namespace>
</header>
<header id="doxygen.hex_8hpp" name="boost/algorithm/hex.hpp">
<para>Convert sequence of integral types into a sequence of hexadecimal characters and back. Based on the MySQL functions HEX and UNHEX. </para><para><para>Marshall Clow </para>

</para><namespace name="boost">
<namespace name="algorithm">
<struct id="doxygen.structboost_1_1algorithm_1_1hex__decode__error" name="hex_decode_error"><inherit access="public">boost::exception</inherit><inherit access="public">std::exception</inherit><purpose>Base exception class for all hex decoding errors. </purpose></struct><struct id="doxygen.structboost_1_1algorithm_1_1non__hex__input" name="non_hex_input"><inherit access="public">boost::algorithm::hex_decode_error</inherit><purpose>Thrown when a non-hex value (0-9, A-F) encountered when decoding. Contains the offending character. </purpose></struct><struct id="doxygen.structboost_1_1algorithm_1_1not__enough__input" name="not_enough_input"><inherit access="public">boost::algorithm::hex_decode_error</inherit><purpose>Thrown when the input sequence unexpectedly ends. </purpose></struct><typedef id="doxygen.hex_8hpp_1a65883d339a19c238ae4e744ad16d9940" name="bad_char"><type>boost::error_info&lt; struct bad_char_, char &gt;</type></typedef>














<function id="doxygen.hex_8hpp_1a1b9ef0d2aa875ac4d01273a6a3d55442" name="hex"><type><emphasis>unspecified</emphasis></type><template>
          <template-type-parameter name="InputIterator"/>
          <template-type-parameter name="OutputIterator"/>
        </template><parameter name="first"><paramtype>InputIterator</paramtype><description><para>The start of the input sequence </para></description></parameter><parameter name="last"><paramtype>InputIterator</paramtype><description><para>One past the end of the input sequence </para></description></parameter><parameter name="out"><paramtype>OutputIterator</paramtype><description><para>An output iterator to the results into </para></description></parameter><purpose>Converts a sequence of integral types into a hexadecimal sequence of characters. </purpose><description><para>

<note><para>Based on the MySQL function of the same name </para>
</note>
</para></description><returns><para>The updated output iterator </para>
</returns></function>
<function id="doxygen.hex_8hpp_1a30e8dd2729770c1568754a283a9c4422" name="hex_lower"><type><emphasis>unspecified</emphasis></type><template>
          <template-type-parameter name="InputIterator"/>
          <template-type-parameter name="OutputIterator"/>
        </template><parameter name="first"><paramtype>InputIterator</paramtype><description><para>The start of the input sequence </para></description></parameter><parameter name="last"><paramtype>InputIterator</paramtype><description><para>One past the end of the input sequence </para></description></parameter><parameter name="out"><paramtype>OutputIterator</paramtype><description><para>An output iterator to the results into </para></description></parameter><purpose>Converts a sequence of integral types into a lower case hexadecimal sequence of characters. </purpose><description><para>

<note><para>Based on the MySQL function of the same name </para>
</note>
</para></description><returns><para>The updated output iterator </para>
</returns></function>
<function id="doxygen.hex_8hpp_1a7d1b658021a00920b5776d42a23fc121" name="hex"><type>boost::enable_if&lt; boost::is_integral&lt; T &gt;, OutputIterator &gt;::type</type><template>
          <template-type-parameter name="T"/>
          <template-type-parameter name="OutputIterator"/>
        </template><parameter name="ptr"><paramtype>const T *</paramtype><description><para>A pointer to a 0-terminated sequence of data. </para></description></parameter><parameter name="out"><paramtype>OutputIterator</paramtype><description><para>An output iterator to the results into </para></description></parameter><purpose>Converts a sequence of integral types into a hexadecimal sequence of characters. </purpose><description><para>

<note><para>Based on the MySQL function of the same name </para>
</note>
</para></description><returns><para>The updated output iterator </para>
</returns></function>
<function id="doxygen.hex_8hpp_1a3fcf0d636b7dad5776d50fc856fab594" name="hex_lower"><type>boost::enable_if&lt; boost::is_integral&lt; T &gt;, OutputIterator &gt;::type</type><template>
          <template-type-parameter name="T"/>
          <template-type-parameter name="OutputIterator"/>
        </template><parameter name="ptr"><paramtype>const T *</paramtype><description><para>A pointer to a 0-terminated sequence of data. </para></description></parameter><parameter name="out"><paramtype>OutputIterator</paramtype><description><para>An output iterator to the results into </para></description></parameter><purpose>Converts a sequence of integral types into a lower case hexadecimal sequence of characters. </purpose><description><para>

<note><para>Based on the MySQL function of the same name </para>
</note>
</para></description><returns><para>The updated output iterator </para>
</returns></function>
<function id="doxygen.hex_8hpp_1a1f99f48dbb9f1b3238ed719b9df6bb12" name="hex"><type><emphasis>unspecified</emphasis></type><template>
          <template-type-parameter name="Range"/>
          <template-type-parameter name="OutputIterator"/>
        </template><parameter name="r"><paramtype>const Range &amp;</paramtype><description><para>The input range </para></description></parameter><parameter name="out"><paramtype>OutputIterator</paramtype><description><para>An output iterator to the results into </para></description></parameter><purpose>Converts a sequence of integral types into a hexadecimal sequence of characters. </purpose><description><para>

<note><para>Based on the MySQL function of the same name </para>
</note>
</para></description><returns><para>The updated output iterator </para>
</returns></function>
<function id="doxygen.hex_8hpp_1a9351d900ef5f0291a9cd0d3b351f25d7" name="hex_lower"><type><emphasis>unspecified</emphasis></type><template>
          <template-type-parameter name="Range"/>
          <template-type-parameter name="OutputIterator"/>
        </template><parameter name="r"><paramtype>const Range &amp;</paramtype><description><para>The input range </para></description></parameter><parameter name="out"><paramtype>OutputIterator</paramtype><description><para>An output iterator to the results into </para></description></parameter><purpose>Converts a sequence of integral types into a lower case hexadecimal sequence of characters. </purpose><description><para>

<note><para>Based on the MySQL function of the same name </para>
</note>
</para></description><returns><para>The updated output iterator </para>
</returns></function>
<function id="doxygen.hex_8hpp_1aebfb4e9297b7263b4114c98312b266e2" name="unhex"><type>OutputIterator</type><template>
          <template-type-parameter name="InputIterator"/>
          <template-type-parameter name="OutputIterator"/>
        </template><parameter name="first"><paramtype>InputIterator</paramtype><description><para>The start of the input sequence </para></description></parameter><parameter name="last"><paramtype>InputIterator</paramtype><description><para>One past the end of the input sequence </para></description></parameter><parameter name="out"><paramtype>OutputIterator</paramtype><description><para>An output iterator to the results into </para></description></parameter><purpose>Converts a sequence of hexadecimal characters into a sequence of integers. </purpose><description><para>

<note><para>Based on the MySQL function of the same name </para>
</note>
</para></description><returns><para>The updated output iterator </para>
</returns></function>
<function id="doxygen.hex_8hpp_1a2093b84f83e45f137fa8d18970514edd" name="unhex"><type>OutputIterator</type><template>
          <template-type-parameter name="T"/>
          <template-type-parameter name="OutputIterator"/>
        </template><parameter name="ptr"><paramtype>const T *</paramtype><description><para>A pointer to a null-terminated input sequence. </para></description></parameter><parameter name="out"><paramtype>OutputIterator</paramtype><description><para>An output iterator to the results into </para></description></parameter><purpose>Converts a sequence of hexadecimal characters into a sequence of integers. </purpose><description><para>

<note><para>Based on the MySQL function of the same name </para>
</note>
</para></description><returns><para>The updated output iterator </para>
</returns></function>
<function id="doxygen.hex_8hpp_1a30e93cc24b2665598854ddb89557ade9" name="unhex"><type>OutputIterator</type><template>
          <template-type-parameter name="Range"/>
          <template-type-parameter name="OutputIterator"/>
        </template><parameter name="r"><paramtype>const Range &amp;</paramtype><description><para>The input range </para></description></parameter><parameter name="out"><paramtype>OutputIterator</paramtype><description><para>An output iterator to the results into </para></description></parameter><purpose>Converts a sequence of hexadecimal characters into a sequence of integers. </purpose><description><para>

<note><para>Based on the MySQL function of the same name </para>
</note>
</para></description><returns><para>The updated output iterator </para>
</returns></function>
<function id="doxygen.hex_8hpp_1a13433297b719d48f0a99e595277de44d" name="hex"><type>String</type><template>
          <template-type-parameter name="String"/>
        </template><parameter name="input"><paramtype>const String &amp;</paramtype><description><para>A container to be converted </para></description></parameter><purpose>Converts a sequence of integral types into a hexadecimal sequence of characters. </purpose><description><para>

</para></description><returns><para>A container with the encoded text </para>
</returns></function>
<function id="doxygen.hex_8hpp_1ad06ceaaf8e808a3d585f8b06f59297e5" name="hex_lower"><type>String</type><template>
          <template-type-parameter name="String"/>
        </template><parameter name="input"><paramtype>const String &amp;</paramtype><description><para>A container to be converted </para></description></parameter><purpose>Converts a sequence of integral types into a lower case hexadecimal sequence of characters. </purpose><description><para>

</para></description><returns><para>A container with the encoded text </para>
</returns></function>
<function id="doxygen.hex_8hpp_1a4b1b1d40f9b24ce6fdd27dca406195ab" name="unhex"><type>String</type><template>
          <template-type-parameter name="String"/>
        </template><parameter name="input"><paramtype>const String &amp;</paramtype><description><para>A container to be converted </para></description></parameter><purpose>Converts a sequence of hexadecimal characters into a sequence of characters. </purpose><description><para>

</para></description><returns><para>A container with the decoded text </para>
</returns></function>






























































































































</namespace>




















</namespace>
</header>
<header id="doxygen.is__clamped_8hpp" name="boost/algorithm/is_clamped.hpp">
<para>IsClamped algorithm. </para><para><para>Ivan Matek, Marshall Clow </para>

</para><namespace name="boost">
<namespace name="algorithm">












<function id="doxygen.is__clamped_8hpp_1adf7080c21937c5df97ab26f327e05753" name="is_clamped"><type>BOOST_CXX14_CONSTEXPR bool</type><template>
          <template-type-parameter name="T"/>
          <template-type-parameter name="Pred"/>
        </template><parameter name="val"><paramtype>T const &amp;</paramtype><description><para>The value to be checked </para></description></parameter><parameter name="lo"><paramtype>typename boost::type_identity&lt; T &gt;::type const &amp;</paramtype><description><para>The lower bound of the range </para></description></parameter><parameter name="hi"><paramtype>typename boost::type_identity&lt; T &gt;::type const &amp;</paramtype><description><para>The upper bound of the range </para></description></parameter><parameter name="p"><paramtype>Pred</paramtype><description><para>A predicate to use to compare the values. p ( a, b ) returns a boolean. </para></description></parameter><description><para>

</para></description><returns><para>true if value "val" is in the range [ lo, hi ] using the comparison predicate p. If p ( val, lo ) return false. If p ( hi, val ) return false. Otherwise, returns true.</para>
</returns></function>
<function id="doxygen.is__clamped_8hpp_1a0a4b0ed4fbe0b21973d84c32adb15998" name="is_clamped"><type>BOOST_CXX14_CONSTEXPR bool</type><template>
          <template-type-parameter name="T"/>
        </template><parameter name="val"><paramtype>const T &amp;</paramtype><description><para>The value to be checked </para></description></parameter><parameter name="lo"><paramtype>typename boost::type_identity&lt; T &gt;::type const &amp;</paramtype><description><para>The lower bound of the range </para></description></parameter><parameter name="hi"><paramtype>typename boost::type_identity&lt; T &gt;::type const &amp;</paramtype><description><para>The upper bound of the range </para></description></parameter><description><para>

</para></description><returns><para>true if value "val" is in the range [ lo, hi ] using operator &lt; for comparison. If the value is less than lo, return false. If the value is greater than hi, return false. Otherwise, returns true.</para>
</returns></function>










































































































































</namespace>




















</namespace>
</header>
<header id="doxygen.is__palindrome_8hpp" name="boost/algorithm/is_palindrome.hpp">
<para>Checks the input sequence on palindrome. </para><para><para>Alexander Zaitsev </para>

</para><namespace name="boost">
<namespace name="algorithm">






<function id="doxygen.is__palindrome_8hpp_1a3a44aeaa967fab2b1315902af602fb6e" name="is_palindrome"><type>bool</type><template>
          <template-type-parameter name="BidirectionalIterator"/>
          <template-type-parameter name="Predicate"/>
        </template><parameter name="begin"><paramtype>BidirectionalIterator</paramtype><description><para>The start of the input sequence </para></description></parameter><parameter name="end"><paramtype>BidirectionalIterator</paramtype><description><para>One past the end of the input sequence </para></description></parameter><parameter name="p"><paramtype>Predicate</paramtype><description><para>A predicate used to compare the values.</para></description></parameter><description><para>

<note><para>This function will return true for empty sequences and for palindromes. For other sequences function will return false. Complexity: O(N). </para>
</note>
</para></description><returns><para>true if the entire sequence is palindrome</para>
</returns></function>
<function id="doxygen.is__palindrome_8hpp_1acf698720548980646517554017212a85" name="is_palindrome"><type>bool</type><template>
          <template-type-parameter name="BidirectionalIterator"/>
        </template><parameter name="begin"><paramtype>BidirectionalIterator</paramtype><description><para>The start of the input sequence </para></description></parameter><parameter name="end"><paramtype>BidirectionalIterator</paramtype><description><para>One past the end of the input sequence</para></description></parameter><description><para>

<note><para>This function will return true for empty sequences and for palindromes. For other sequences function will return false. Complexity: O(N). </para>
</note>
</para></description><returns><para>true if the entire sequence is palindrome</para>
</returns></function>
<function id="doxygen.is__palindrome_8hpp_1a8d73bf26c434b611d39a85b908988bc8" name="is_palindrome"><type>bool</type><template>
          <template-type-parameter name="R"/>
        </template><parameter name="range"><paramtype>const R &amp;</paramtype><description><para>The range to be tested.</para></description></parameter><description><para>

<note><para>This function will return true for empty sequences and for palindromes. For other sequences function will return false. Complexity: O(N). </para>
</note>
</para></description><returns><para>true if the entire sequence is palindrome</para>
</returns></function>
<function id="doxygen.is__palindrome_8hpp_1a2fa607abe5e6644d4eb36d5906315728" name="is_palindrome"><type>bool</type><template>
          <template-type-parameter name="R"/>
          <template-type-parameter name="Predicate"/>
        </template><parameter name="range"><paramtype>const R &amp;</paramtype><description><para>The range to be tested. </para></description></parameter><parameter name="p"><paramtype>Predicate</paramtype><description><para>A predicate used to compare the values.</para></description></parameter><description><para>

<note><para>This function will return true for empty sequences and for palindromes. For other sequences function will return false. Complexity: O(N). </para>
</note>
</para></description><returns><para>true if the entire sequence is palindrome</para>
</returns></function>
<function id="doxygen.is__palindrome_8hpp_1a81130bcc2e590517849d5cbbbb3133e0" name="is_palindrome"><type>bool</type><parameter name="str"><paramtype>const char *</paramtype><description><para>C-string to be tested.</para></description></parameter><description><para>

<note><para>This function will return true for empty sequences and for palindromes. For other sequences function will return false. Complexity: O(N). </para>
</note>
</para></description><returns><para>true if the entire sequence is palindrome</para>
</returns></function>
<function id="doxygen.is__palindrome_8hpp_1a9b9fb8dc39df30fbb7b7dfdb1420f860" name="is_palindrome"><type>bool</type><template>
          <template-type-parameter name="Predicate"/>
        </template><parameter name="str"><paramtype>const char *</paramtype><description><para>C-string to be tested. </para></description></parameter><parameter name="p"><paramtype>Predicate</paramtype><description><para>A predicate used to compare the values.</para></description></parameter><description><para>

<note><para>This function will return true for empty sequences and for palindromes. For other sequences function will return false. Complexity: O(N). </para>
</note>
</para></description><returns><para>true if the entire sequence is palindrome</para>
</returns></function>












































































































































</namespace>




















</namespace>
</header>
<header id="doxygen.is__partitioned__until_8hpp" name="boost/algorithm/is_partitioned_until.hpp">
<para>Tell if a sequence is partitioned. </para><para><para>Alexander Zaitsev </para>

</para><namespace name="boost">
<namespace name="algorithm">




<function id="doxygen.is__partitioned__until_8hpp_1a94a2391f9b4bd1e42963b854be6404f5" name="is_partitioned_until"><type>InputIterator</type><template>
          <template-type-parameter name="InputIterator"/>
          <template-type-parameter name="UnaryPredicate"/>
        </template><parameter name="first"><paramtype>InputIterator</paramtype><description><para>The start of the input sequence </para></description></parameter><parameter name="last"><paramtype>InputIterator</paramtype><description><para>One past the end of the input sequence </para></description></parameter><parameter name="p"><paramtype>UnaryPredicate</paramtype><description><para>The predicate to test the values with</para></description></parameter><purpose>Tests to see if a sequence is partitioned according to a predicate. In other words, all the items in the sequence that satisfy the predicate are at the beginning of the sequence. </purpose><description><para>
<note><para>Returns the first iterator 'it' in the sequence [first, last) for which is_partitioned(first, it, p) is false. Returns last if the entire sequence is partitioned. Complexity: O(N). </para>
</note>
</para></description></function>
<function id="doxygen.is__partitioned__until_8hpp_1a3b807f00d323dd8d92eab64511564bfb" name="is_partitioned_until"><type>boost::range_iterator&lt; constRange &gt;::type</type><template>
          <template-type-parameter name="Range"/>
          <template-type-parameter name="UnaryPredicate"/>
        </template><parameter name="r"><paramtype>const Range &amp;</paramtype><description><para>The input range </para></description></parameter><parameter name="p"><paramtype>UnaryPredicate</paramtype><description><para>The predicate to test the values with</para></description></parameter><purpose>Tests to see if a sequence is partitioned according to a predicate. In other words, all the items in the sequence that satisfy the predicate are at the beginning of the sequence. </purpose><description><para>
<note><para>Returns the first iterator 'it' in the sequence [first, last) for which is_partitioned(first, it, p) is false. Returns last if the entire sequence is partitioned. Complexity: O(N). </para>
</note>
</para></description></function>


















































































































































</namespace>




















</namespace>
</header>
<header id="doxygen.minmax_8hpp" name="boost/algorithm/minmax.hpp">
<namespace name="boost">


















<function id="doxygen.minmax_8hpp_1adbc2c2d0d22a2b2d6f4b87c5124d3e52" name="minmax"><type>tuple&lt; T const &amp;, T const &amp; &gt;</type><template>
          <template-type-parameter name="T"/>
        </template><parameter name="a"><paramtype>T const &amp;</paramtype></parameter><parameter name="b"><paramtype>T const &amp;</paramtype></parameter></function>
<function id="doxygen.minmax_8hpp_1a92b19deb22372cedc7d58a6d93b5db9f" name="minmax"><type>tuple&lt; T const &amp;, T const &amp; &gt;</type><template>
          <template-type-parameter name="T"/>
          <template-type-parameter name="BinaryPredicate"/>
        </template><parameter name="a"><paramtype>T const &amp;</paramtype></parameter><parameter name="b"><paramtype>T const &amp;</paramtype></parameter><parameter name="comp"><paramtype>BinaryPredicate</paramtype></parameter></function>
</namespace>
</header>
<header id="doxygen.minmax__element_8hpp" name="boost/algorithm/minmax_element.hpp">
<namespace name="boost">
<function id="doxygen.minmax__element_8hpp_1af263603ff81bd830c8dce2656715486a" name="minmax_element"><type>std::pair&lt; ForwardIter, ForwardIter &gt;</type><template>
          <template-type-parameter name="ForwardIter"/>
        </template><parameter name="first"><paramtype>ForwardIter</paramtype></parameter><parameter name="last"><paramtype>ForwardIter</paramtype></parameter></function>
<function id="doxygen.minmax__element_8hpp_1ab9afbec30dfe08b40bcb6bc5cc5ef4ce" name="minmax_element"><type>std::pair&lt; ForwardIter, ForwardIter &gt;</type><template>
          <template-type-parameter name="ForwardIter"/>
          <template-type-parameter name="BinaryPredicate"/>
        </template><parameter name="first"><paramtype>ForwardIter</paramtype></parameter><parameter name="last"><paramtype>ForwardIter</paramtype></parameter><parameter name="comp"><paramtype>BinaryPredicate</paramtype></parameter></function>
<function id="doxygen.minmax__element_8hpp_1a9e3c8bf298a8cf422f2535ac7773ead6" name="first_min_element"><type>ForwardIter</type><template>
          <template-type-parameter name="ForwardIter"/>
        </template><parameter name="first"><paramtype>ForwardIter</paramtype></parameter><parameter name="last"><paramtype>ForwardIter</paramtype></parameter></function>
<function id="doxygen.minmax__element_8hpp_1a5222b098d19efec63708f4a2da0d05c6" name="first_min_element"><type>ForwardIter</type><template>
          <template-type-parameter name="ForwardIter"/>
          <template-type-parameter name="BinaryPredicate"/>
        </template><parameter name="first"><paramtype>ForwardIter</paramtype></parameter><parameter name="last"><paramtype>ForwardIter</paramtype></parameter><parameter name="comp"><paramtype>BinaryPredicate</paramtype></parameter></function>
<function id="doxygen.minmax__element_8hpp_1ab04c8b3f7f42d8572ba9a7f2d9aaf24a" name="last_min_element"><type>ForwardIter</type><template>
          <template-type-parameter name="ForwardIter"/>
        </template><parameter name="first"><paramtype>ForwardIter</paramtype></parameter><parameter name="last"><paramtype>ForwardIter</paramtype></parameter></function>
<function id="doxygen.minmax__element_8hpp_1a117b325c958cb598d8271adc5da1ee50" name="last_min_element"><type>ForwardIter</type><template>
          <template-type-parameter name="ForwardIter"/>
          <template-type-parameter name="BinaryPredicate"/>
        </template><parameter name="first"><paramtype>ForwardIter</paramtype></parameter><parameter name="last"><paramtype>ForwardIter</paramtype></parameter><parameter name="comp"><paramtype>BinaryPredicate</paramtype></parameter></function>
<function id="doxygen.minmax__element_8hpp_1a77c36aaa0f43537895379dda202c9eb2" name="first_max_element"><type>ForwardIter</type><template>
          <template-type-parameter name="ForwardIter"/>
        </template><parameter name="first"><paramtype>ForwardIter</paramtype></parameter><parameter name="last"><paramtype>ForwardIter</paramtype></parameter></function>
<function id="doxygen.minmax__element_8hpp_1ad66a8142642a1a8443e6af8946ec189a" name="first_max_element"><type>ForwardIter</type><template>
          <template-type-parameter name="ForwardIter"/>
          <template-type-parameter name="BinaryPredicate"/>
        </template><parameter name="first"><paramtype>ForwardIter</paramtype></parameter><parameter name="last"><paramtype>ForwardIter</paramtype></parameter><parameter name="comp"><paramtype>BinaryPredicate</paramtype></parameter></function>
<function id="doxygen.minmax__element_8hpp_1ada90221fc6533f7454ddb3a8b738dea6" name="last_max_element"><type>ForwardIter</type><template>
          <template-type-parameter name="ForwardIter"/>
        </template><parameter name="first"><paramtype>ForwardIter</paramtype></parameter><parameter name="last"><paramtype>ForwardIter</paramtype></parameter></function>
<function id="doxygen.minmax__element_8hpp_1a3934cbd5d8c82d2704656b00e63dfdd2" name="last_max_element"><type>ForwardIter</type><template>
          <template-type-parameter name="ForwardIter"/>
          <template-type-parameter name="BinaryPredicate"/>
        </template><parameter name="first"><paramtype>ForwardIter</paramtype></parameter><parameter name="last"><paramtype>ForwardIter</paramtype></parameter><parameter name="comp"><paramtype>BinaryPredicate</paramtype></parameter></function>
<function id="doxygen.minmax__element_8hpp_1a30285377a78e4c6b4d4ef26328d12aa4" name="first_min_first_max_element"><type>std::pair&lt; ForwardIter, ForwardIter &gt;</type><template>
          <template-type-parameter name="ForwardIter"/>
        </template><parameter name="first"><paramtype>ForwardIter</paramtype></parameter><parameter name="last"><paramtype>ForwardIter</paramtype></parameter></function>
<function id="doxygen.minmax__element_8hpp_1a712243f4c328709da9f616245aef9949" name="first_min_first_max_element"><type>std::pair&lt; ForwardIter, ForwardIter &gt;</type><template>
          <template-type-parameter name="ForwardIter"/>
          <template-type-parameter name="BinaryPredicate"/>
        </template><parameter name="first"><paramtype>ForwardIter</paramtype></parameter><parameter name="last"><paramtype>ForwardIter</paramtype></parameter><parameter name="comp"><paramtype>BinaryPredicate</paramtype></parameter></function>
<function id="doxygen.minmax__element_8hpp_1ac58e68df8eb3cde8a403b56cd240d5ca" name="first_min_last_max_element"><type>std::pair&lt; ForwardIter, ForwardIter &gt;</type><template>
          <template-type-parameter name="ForwardIter"/>
        </template><parameter name="first"><paramtype>ForwardIter</paramtype></parameter><parameter name="last"><paramtype>ForwardIter</paramtype></parameter></function>
<function id="doxygen.minmax__element_8hpp_1a9ceb8d062c29c7d6afff3615411dcd4a" name="first_min_last_max_element"><type>std::pair&lt; ForwardIter, ForwardIter &gt;</type><template>
          <template-type-parameter name="ForwardIter"/>
          <template-type-parameter name="BinaryPredicate"/>
        </template><parameter name="first"><paramtype>ForwardIter</paramtype></parameter><parameter name="last"><paramtype>ForwardIter</paramtype></parameter><parameter name="comp"><paramtype>BinaryPredicate</paramtype></parameter></function>
<function id="doxygen.minmax__element_8hpp_1a1d996500f55c44c24245269cf33dbf75" name="last_min_first_max_element"><type>std::pair&lt; ForwardIter, ForwardIter &gt;</type><template>
          <template-type-parameter name="ForwardIter"/>
        </template><parameter name="first"><paramtype>ForwardIter</paramtype></parameter><parameter name="last"><paramtype>ForwardIter</paramtype></parameter></function>
<function id="doxygen.minmax__element_8hpp_1a354aff08bc13199a1b9fd41fcd93f28f" name="last_min_first_max_element"><type>std::pair&lt; ForwardIter, ForwardIter &gt;</type><template>
          <template-type-parameter name="ForwardIter"/>
          <template-type-parameter name="BinaryPredicate"/>
        </template><parameter name="first"><paramtype>ForwardIter</paramtype></parameter><parameter name="last"><paramtype>ForwardIter</paramtype></parameter><parameter name="comp"><paramtype>BinaryPredicate</paramtype></parameter></function>
<function id="doxygen.minmax__element_8hpp_1a9d846939c7c68d94f0b6a6d84707f0ac" name="last_min_last_max_element"><type>std::pair&lt; ForwardIter, ForwardIter &gt;</type><template>
          <template-type-parameter name="ForwardIter"/>
        </template><parameter name="first"><paramtype>ForwardIter</paramtype></parameter><parameter name="last"><paramtype>ForwardIter</paramtype></parameter></function>
<function id="doxygen.minmax__element_8hpp_1a3af275346b40dd81a5e49d74b1129456" name="last_min_last_max_element"><type>std::pair&lt; ForwardIter, ForwardIter &gt;</type><template>
          <template-type-parameter name="ForwardIter"/>
          <template-type-parameter name="BinaryPredicate"/>
        </template><parameter name="first"><paramtype>ForwardIter</paramtype></parameter><parameter name="last"><paramtype>ForwardIter</paramtype></parameter><parameter name="comp"><paramtype>BinaryPredicate</paramtype></parameter></function>


</namespace>
</header>
<header id="doxygen.boyer__moore_8hpp" name="boost/algorithm/searching/boyer_moore.hpp">
<namespace name="boost">
<namespace name="algorithm">
<class id="doxygen.classboost_1_1algorithm_1_1boyer__moore" name="boyer_moore"><template>
      <template-type-parameter name="patIter"/>
      <template-type-parameter name="traits"><default><emphasis>unspecified</emphasis></default></template-type-parameter>
    </template><method-group name="public member functions">
<constructor id="doxygen.classboost_1_1algorithm_1_1boyer__moore_1acb243f51e455354eb519c61c671233dc"><parameter name="first"><paramtype>patIter</paramtype></parameter><parameter name="last"><paramtype>patIter</paramtype></parameter></constructor>
<destructor id="doxygen.classboost_1_1algorithm_1_1boyer__moore_1a3509972404f76f0b2efdd33f657d64b0"/>
<method id="doxygen.classboost_1_1algorithm_1_1boyer__moore_1a32aa5a15bc9f686eab5c82c37c71491f" name="operator()" cv="const"><type>std::pair&lt; corpusIter, corpusIter &gt;</type><template>
          <template-type-parameter name="corpusIter"/>
        </template><parameter name="corpus_first"><paramtype>corpusIter</paramtype></parameter><parameter name="corpus_last"><paramtype>corpusIter</paramtype></parameter></method>
<method id="doxygen.classboost_1_1algorithm_1_1boyer__moore_1aa54ce339e3894f04bc0cf278eb85df3d" name="operator()" cv="const"><type>std::pair&lt; typename boost::range_iterator&lt; Range &gt;::type, typename boost::range_iterator&lt; Range &gt;::type &gt;</type><template>
          <template-type-parameter name="Range"/>
        </template><parameter name="r"><paramtype>Range &amp;</paramtype></parameter></method>
</method-group>
</class>































































<function id="doxygen.boyer__moore_8hpp_1a168aaed9d4ecc6f30d79cf14663f2b00" name="boyer_moore_search"><type>std::pair&lt; corpusIter, corpusIter &gt;</type><template>
          <template-type-parameter name="patIter"/>
          <template-type-parameter name="corpusIter"/>
        </template><parameter name="corpus_first"><paramtype>corpusIter</paramtype><description><para>The start of the data to search (Random Access Iterator) </para></description></parameter><parameter name="corpus_last"><paramtype>corpusIter</paramtype><description><para>One past the end of the data to search </para></description></parameter><parameter name="pat_first"><paramtype>patIter</paramtype><description><para>The start of the pattern to search for (Random Access Iterator) </para></description></parameter><parameter name="pat_last"><paramtype>patIter</paramtype><description><para>One past the end of the data to search for </para></description></parameter><purpose>Searches the corpus for the pattern. </purpose><description><para>
</para></description></function>
<function id="doxygen.boyer__moore_8hpp_1adea48fd6167cb4277839533aed7dfc1d" name="boyer_moore_search"><type>std::pair&lt; corpusIter, corpusIter &gt;</type><template>
          <template-type-parameter name="PatternRange"/>
          <template-type-parameter name="corpusIter"/>
        </template><parameter name="corpus_first"><paramtype>corpusIter</paramtype></parameter><parameter name="corpus_last"><paramtype>corpusIter</paramtype></parameter><parameter name="pattern"><paramtype>const PatternRange &amp;</paramtype></parameter></function>
<function id="doxygen.boyer__moore_8hpp_1a88e849aee0d54895aa58d442b68550e4" name="boyer_moore_search"><type>boost::disable_if_c&lt; boost::is_same&lt; CorpusRange, patIter &gt;::value, std::pair&lt; typenameboost::range_iterator&lt; CorpusRange &gt;::type, typenameboost::range_iterator&lt; CorpusRange &gt;::type &gt; &gt;::type</type><template>
          <template-type-parameter name="patIter"/>
          <template-type-parameter name="CorpusRange"/>
        </template><parameter name="corpus"><paramtype>CorpusRange &amp;</paramtype></parameter><parameter name="pat_first"><paramtype>patIter</paramtype></parameter><parameter name="pat_last"><paramtype>patIter</paramtype></parameter></function>
<function id="doxygen.boyer__moore_8hpp_1a5749704de662f213fa57edabe896a116" name="boyer_moore_search"><type>std::pair&lt; typename boost::range_iterator&lt; CorpusRange &gt;::type, typename boost::range_iterator&lt; CorpusRange &gt;::type &gt;</type><template>
          <template-type-parameter name="PatternRange"/>
          <template-type-parameter name="CorpusRange"/>
        </template><parameter name="corpus"><paramtype>CorpusRange &amp;</paramtype></parameter><parameter name="pattern"><paramtype>const PatternRange &amp;</paramtype></parameter></function>
<function id="doxygen.boyer__moore_8hpp_1a7612f7999d59acc826bb20de301a609d" name="make_boyer_moore"><type><classname>boost::algorithm::boyer_moore</classname>&lt; typename boost::range_iterator&lt; const Range &gt;::type &gt;</type><template>
          <template-type-parameter name="Range"/>
        </template><parameter name="r"><paramtype>const Range &amp;</paramtype></parameter></function>
<function id="doxygen.boyer__moore_8hpp_1a0d1773d414c4736c17b18ef7e2c44d8c" name="make_boyer_moore"><type><classname>boost::algorithm::boyer_moore</classname>&lt; typename boost::range_iterator&lt; Range &gt;::type &gt;</type><template>
          <template-type-parameter name="Range"/>
        </template><parameter name="r"><paramtype>Range &amp;</paramtype></parameter></function>


















































































</namespace>




















</namespace>
</header>
<header id="doxygen.boyer__moore__horspool_8hpp" name="boost/algorithm/searching/boyer_moore_horspool.hpp">
<namespace name="boost">
<namespace name="algorithm">
<class id="doxygen.classboost_1_1algorithm_1_1boyer__moore__horspool" name="boyer_moore_horspool"><template>
      <template-type-parameter name="patIter"/>
      <template-type-parameter name="traits"><default><emphasis>unspecified</emphasis></default></template-type-parameter>
    </template><method-group name="public member functions">
<constructor id="doxygen.classboost_1_1algorithm_1_1boyer__moore__horspool_1a8dd8b87126efa91649472ceb52a49b6c"><parameter name="first"><paramtype>patIter</paramtype></parameter><parameter name="last"><paramtype>patIter</paramtype></parameter></constructor>
<destructor id="doxygen.classboost_1_1algorithm_1_1boyer__moore__horspool_1abd3c3f82000cb44f6b3508fee774c3a5"/>
<method id="doxygen.classboost_1_1algorithm_1_1boyer__moore__horspool_1a0d96b503a2bd24f1014f9267e1193ced" name="operator()" cv="const"><type>std::pair&lt; corpusIter, corpusIter &gt;</type><template>
          <template-type-parameter name="corpusIter"/>
        </template><parameter name="corpus_first"><paramtype>corpusIter</paramtype></parameter><parameter name="corpus_last"><paramtype>corpusIter</paramtype></parameter></method>
<method id="doxygen.classboost_1_1algorithm_1_1boyer__moore__horspool_1a82674d5df85ac5267fc76109887375c3" name="operator()" cv="const"><type>std::pair&lt; typename boost::range_iterator&lt; Range &gt;::type, typename boost::range_iterator&lt; Range &gt;::type &gt;</type><template>
          <template-type-parameter name="Range"/>
        </template><parameter name="r"><paramtype>Range &amp;</paramtype></parameter></method>
</method-group>
</class>

























































<function id="doxygen.boyer__moore__horspool_8hpp_1ac0fdb9655adb726365646a982ce7c8ca" name="boyer_moore_horspool_search"><type>std::pair&lt; corpusIter, corpusIter &gt;</type><template>
          <template-type-parameter name="patIter"/>
          <template-type-parameter name="corpusIter"/>
        </template><parameter name="corpus_first"><paramtype>corpusIter</paramtype><description><para>The start of the data to search (Random Access Iterator) </para></description></parameter><parameter name="corpus_last"><paramtype>corpusIter</paramtype><description><para>One past the end of the data to search </para></description></parameter><parameter name="pat_first"><paramtype>patIter</paramtype><description><para>The start of the pattern to search for (Random Access Iterator) </para></description></parameter><parameter name="pat_last"><paramtype>patIter</paramtype><description><para>One past the end of the data to search for </para></description></parameter><purpose>Searches the corpus for the pattern. </purpose><description><para>
</para></description></function>
<function id="doxygen.boyer__moore__horspool_8hpp_1ada5ef5c14f48346744d77dbbb49bc29e" name="boyer_moore_horspool_search"><type>std::pair&lt; corpusIter, corpusIter &gt;</type><template>
          <template-type-parameter name="PatternRange"/>
          <template-type-parameter name="corpusIter"/>
        </template><parameter name="corpus_first"><paramtype>corpusIter</paramtype></parameter><parameter name="corpus_last"><paramtype>corpusIter</paramtype></parameter><parameter name="pattern"><paramtype>const PatternRange &amp;</paramtype></parameter></function>
<function id="doxygen.boyer__moore__horspool_8hpp_1ad2373f0c98f2a56b6493de1987158a24" name="boyer_moore_horspool_search"><type>boost::disable_if_c&lt; boost::is_same&lt; CorpusRange, patIter &gt;::value, std::pair&lt; typenameboost::range_iterator&lt; CorpusRange &gt;::type, typenameboost::range_iterator&lt; CorpusRange &gt;::type &gt; &gt;::type</type><template>
          <template-type-parameter name="patIter"/>
          <template-type-parameter name="CorpusRange"/>
        </template><parameter name="corpus"><paramtype>CorpusRange &amp;</paramtype></parameter><parameter name="pat_first"><paramtype>patIter</paramtype></parameter><parameter name="pat_last"><paramtype>patIter</paramtype></parameter></function>
<function id="doxygen.boyer__moore__horspool_8hpp_1affcef08888f23773022bb9d8e13b43db" name="boyer_moore_horspool_search"><type>std::pair&lt; typename boost::range_iterator&lt; CorpusRange &gt;::type, typename boost::range_iterator&lt; CorpusRange &gt;::type &gt;</type><template>
          <template-type-parameter name="PatternRange"/>
          <template-type-parameter name="CorpusRange"/>
        </template><parameter name="corpus"><paramtype>CorpusRange &amp;</paramtype></parameter><parameter name="pattern"><paramtype>const PatternRange &amp;</paramtype></parameter></function>
<function id="doxygen.boyer__moore__horspool_8hpp_1ad13ac9e6d353cad3bacbb450ddd69c09" name="make_boyer_moore_horspool"><type><classname>boost::algorithm::boyer_moore_horspool</classname>&lt; typename boost::range_iterator&lt; const Range &gt;::type &gt;</type><template>
          <template-type-parameter name="Range"/>
        </template><parameter name="r"><paramtype>const Range &amp;</paramtype></parameter></function>
<function id="doxygen.boyer__moore__horspool_8hpp_1a50a9c0b18d1c3ccd99d7509fde72b76d" name="make_boyer_moore_horspool"><type><classname>boost::algorithm::boyer_moore_horspool</classname>&lt; typename boost::range_iterator&lt; Range &gt;::type &gt;</type><template>
          <template-type-parameter name="Range"/>
        </template><parameter name="r"><paramtype>Range &amp;</paramtype></parameter></function>
























































































</namespace>




















</namespace>
</header>
<header id="doxygen.knuth__morris__pratt_8hpp" name="boost/algorithm/searching/knuth_morris_pratt.hpp">
<namespace name="boost">
<namespace name="algorithm">
<class id="doxygen.classboost_1_1algorithm_1_1knuth__morris__pratt" name="knuth_morris_pratt"><template>
      <template-type-parameter name="patIter"/>
    </template><method-group name="public member functions">
<constructor id="doxygen.classboost_1_1algorithm_1_1knuth__morris__pratt_1abdc62e2d1f59cddfde12f87eece46c25"><parameter name="first"><paramtype>patIter</paramtype></parameter><parameter name="last"><paramtype>patIter</paramtype></parameter></constructor>
<destructor id="doxygen.classboost_1_1algorithm_1_1knuth__morris__pratt_1adfe02dc68ac149a13e1ab3b48b6ade9d"/>
<method id="doxygen.classboost_1_1algorithm_1_1knuth__morris__pratt_1aee426122c2f6ecc71f63a26999c253df" name="operator()" cv="const"><type>std::pair&lt; corpusIter, corpusIter &gt;</type><template>
          <template-type-parameter name="corpusIter"/>
        </template><parameter name="corpus_first"><paramtype>corpusIter</paramtype></parameter><parameter name="corpus_last"><paramtype>corpusIter</paramtype></parameter></method>
<method id="doxygen.classboost_1_1algorithm_1_1knuth__morris__pratt_1a8114f0697e182febfcd897b5c7d266f1" name="operator()" cv="const"><type>std::pair&lt; typename boost::range_iterator&lt; Range &gt;::type, typename boost::range_iterator&lt; Range &gt;::type &gt;</type><template>
          <template-type-parameter name="Range"/>
        </template><parameter name="r"><paramtype>Range &amp;</paramtype></parameter></method>
</method-group>
</class>



















































<function id="doxygen.knuth__morris__pratt_8hpp_1a9dfa1e01dfae55fee1c63e067ada8aa5" name="knuth_morris_pratt_search"><type>std::pair&lt; corpusIter, corpusIter &gt;</type><template>
          <template-type-parameter name="patIter"/>
          <template-type-parameter name="corpusIter"/>
        </template><parameter name="corpus_first"><paramtype>corpusIter</paramtype><description><para>The start of the data to search (Random Access Iterator) </para></description></parameter><parameter name="corpus_last"><paramtype>corpusIter</paramtype><description><para>One past the end of the data to search </para></description></parameter><parameter name="pat_first"><paramtype>patIter</paramtype><description><para>The start of the pattern to search for (Random Access Iterator) </para></description></parameter><parameter name="pat_last"><paramtype>patIter</paramtype><description><para>One past the end of the data to search for </para></description></parameter><purpose>Searches the corpus for the pattern. </purpose><description><para>
</para></description></function>
<function id="doxygen.knuth__morris__pratt_8hpp_1a8efaf1ab8c5833f54f12dd8dd3de95f3" name="knuth_morris_pratt_search"><type>std::pair&lt; corpusIter, corpusIter &gt;</type><template>
          <template-type-parameter name="PatternRange"/>
          <template-type-parameter name="corpusIter"/>
        </template><parameter name="corpus_first"><paramtype>corpusIter</paramtype></parameter><parameter name="corpus_last"><paramtype>corpusIter</paramtype></parameter><parameter name="pattern"><paramtype>const PatternRange &amp;</paramtype></parameter></function>
<function id="doxygen.knuth__morris__pratt_8hpp_1aa73210b43c583288f05151d266d5d80c" name="knuth_morris_pratt_search"><type>boost::disable_if_c&lt; boost::is_same&lt; CorpusRange, patIter &gt;::value, std::pair&lt; typenameboost::range_iterator&lt; CorpusRange &gt;::type, typenameboost::range_iterator&lt; CorpusRange &gt;::type &gt; &gt;::type</type><template>
          <template-type-parameter name="patIter"/>
          <template-type-parameter name="CorpusRange"/>
        </template><parameter name="corpus"><paramtype>CorpusRange &amp;</paramtype></parameter><parameter name="pat_first"><paramtype>patIter</paramtype></parameter><parameter name="pat_last"><paramtype>patIter</paramtype></parameter></function>
<function id="doxygen.knuth__morris__pratt_8hpp_1a88c565a31b5f7c2532aa693686f27cb3" name="knuth_morris_pratt_search"><type>std::pair&lt; typename boost::range_iterator&lt; CorpusRange &gt;::type, typename boost::range_iterator&lt; CorpusRange &gt;::type &gt;</type><template>
          <template-type-parameter name="PatternRange"/>
          <template-type-parameter name="CorpusRange"/>
        </template><parameter name="corpus"><paramtype>CorpusRange &amp;</paramtype></parameter><parameter name="pattern"><paramtype>const PatternRange &amp;</paramtype></parameter></function>
<function id="doxygen.knuth__morris__pratt_8hpp_1a2c642538c14350d7503f6ce380f38eb3" name="make_knuth_morris_pratt"><type><classname>boost::algorithm::knuth_morris_pratt</classname>&lt; typename boost::range_iterator&lt; const Range &gt;::type &gt;</type><template>
          <template-type-parameter name="Range"/>
        </template><parameter name="r"><paramtype>const Range &amp;</paramtype></parameter></function>
<function id="doxygen.knuth__morris__pratt_8hpp_1a08261165402e10d72ccf2fe3e3d39274" name="make_knuth_morris_pratt"><type><classname>boost::algorithm::knuth_morris_pratt</classname>&lt; typename boost::range_iterator&lt; Range &gt;::type &gt;</type><template>
          <template-type-parameter name="Range"/>
        </template><parameter name="r"><paramtype>Range &amp;</paramtype></parameter></function>






























































































</namespace>




















</namespace>
</header>
<header id="doxygen.sort__subrange_8hpp" name="boost/algorithm/sort_subrange.hpp">
<para>Sort a subrange. </para><para><para>Marshall Clow</para>

Suggested by Sean Parent in his CppCon 2015 keynote </para><namespace name="boost">
<namespace name="algorithm">
<function id="doxygen.sort__subrange_8hpp_1a7e1929fb386ca37d868ebdaf57a262e4" name="sort_subrange"><type>void</type><template>
          <template-type-parameter name="Iterator"/>
          <template-type-parameter name="Pred"/>
        </template><parameter name="first"><paramtype>Iterator</paramtype></parameter><parameter name="last"><paramtype>Iterator</paramtype></parameter><parameter name="sub_first"><paramtype>Iterator</paramtype></parameter><parameter name="sub_last"><paramtype>Iterator</paramtype></parameter><parameter name="p"><paramtype>Pred</paramtype></parameter></function>
<function id="doxygen.sort__subrange_8hpp_1a75c9afc12afec73d852f6cdc0b686538" name="sort_subrange"><type>void</type><template>
          <template-type-parameter name="Iterator"/>
        </template><parameter name="first"><paramtype>Iterator</paramtype></parameter><parameter name="last"><paramtype>Iterator</paramtype></parameter><parameter name="sub_first"><paramtype>Iterator</paramtype></parameter><parameter name="sub_last"><paramtype>Iterator</paramtype></parameter></function>
<function id="doxygen.sort__subrange_8hpp_1abeee4c18fd9fd8f3da07664c0c74c562" name="partition_subrange"><type>void</type><template>
          <template-type-parameter name="Iterator"/>
          <template-type-parameter name="Pred"/>
        </template><parameter name="first"><paramtype>Iterator</paramtype></parameter><parameter name="last"><paramtype>Iterator</paramtype></parameter><parameter name="sub_first"><paramtype>Iterator</paramtype></parameter><parameter name="sub_last"><paramtype>Iterator</paramtype></parameter><parameter name="p"><paramtype>Pred</paramtype></parameter></function>
<function id="doxygen.sort__subrange_8hpp_1ab9b05c12ab19c739e08ddde6ada611b4" name="partition_subrange"><type>void</type><template>
          <template-type-parameter name="Iterator"/>
        </template><parameter name="first"><paramtype>Iterator</paramtype></parameter><parameter name="last"><paramtype>Iterator</paramtype></parameter><parameter name="sub_first"><paramtype>Iterator</paramtype></parameter><parameter name="sub_last"><paramtype>Iterator</paramtype></parameter></function>




















































































































































</namespace>




















</namespace>
</header>
<header id="doxygen.string_8hpp" name="boost/algorithm/string.hpp">
<para>Cumulative include for string_algo library </para></header>
<header id="doxygen.string__regex_8hpp" name="boost/algorithm/string_regex.hpp">
<para>Cumulative include for string_algo library. In addition to <link linkend="doxygen.string_8hpp">string.hpp</link> contains also regex-related stuff. </para></header>
</library-reference>